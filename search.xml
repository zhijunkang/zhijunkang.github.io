<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>命令模式</title>
      <link href="/2019/06/16/18-ming-ling-mo-shi/"/>
      <url>/2019/06/16/18-ming-ling-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><p>属于行为型模式。</p><p>将命令封装成对象中，具有以下作用：</p><ul><li>使用命令来参数化其它对象；</li><li>将命令放入队列中进行排队；</li><li>支持可撤销的操作(<code>undo</code>操作)；</li></ul><p>将请求、命令、动作等封装成对象，这样可以让项目使用这些对象来参数化其他对象。使得命令的请求者(<code>Control</code>)和执行者<code>Light or TV</code>解耦。(这里的<code>Control、Light、TV</code>是我们下面的例子中要用到的)。</p><h2 id="二、结构"><a href="#二、结构" class="headerlink" title="二、结构"></a>二、结构</h2><p>基本结构:</p><ul><li><code>Command</code>：命令；</li><li><code>Receiver</code>：命令接收者，也就是命令真正的执行者(电视或者灯)；</li><li><code>Invoker</code>：通过它来调用命令； (遥控器)</li></ul><p><img src="http://psxfdx6gr.bkt.clouddn.com/18_command_01.png" alt="18_command_01.png"></p><h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><blockquote><p>我们要模拟用一个遥控器控制灯和电视，其中遥控器第一排的按钮控制灯，第二排的按钮控制电视，而且，每一排有两个按钮，第一个是<code>ON</code>，第二个是<code>Off</code>。</p></blockquote><p>如下图:</p><p><img src="images/18_command_02.png" alt="18_command_02.png"></p><h3 id="1、不好的设计"><a href="#1、不好的设计" class="headerlink" title="1、不好的设计"></a>1、不好的设计</h3><p>给出两个实体类: <code>Light</code>和<code>TV</code>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Light</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//打开某个灯</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Light On!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//关闭某个灯</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Light Off!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TV</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TV On!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TV Off!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后就是我们的遥控器:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//控制类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Control</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Light light<span class="token punctuation">;</span>    <span class="token keyword">private</span> TV tv<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> slotNum <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Control</span><span class="token punctuation">(</span>Light light<span class="token punctuation">,</span> TV tv<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tv <span class="token operator">=</span> tv<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token keyword">int</span> slot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>slot<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                light<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                tv<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token keyword">int</span> slot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>slot<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                light<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                tv<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Light light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TV tv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Control control <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Control</span><span class="token punctuation">(</span>light<span class="token punctuation">,</span> tv<span class="token punctuation">)</span><span class="token punctuation">;</span>        control<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        control<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        control<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        control<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出:</p><pre class=" language-java"><code class="language-java">Light On<span class="token operator">!</span>TV On<span class="token operator">!</span>TV Off<span class="token operator">!</span>Light Off<span class="token operator">!</span></code></pre><p>这样的设计确实实现了我们的需求，但是这样的设计的缺点在于: <strong>我们的遥控器和我们的具体的家具很紧密的耦合，而且当我们需要扩展遥控器的时候，需要修改遥控器的代码</strong>。</p><h3 id="2、用命令模式改进的设计"><a href="#2、用命令模式改进的设计" class="headerlink" title="2、用命令模式改进的设计"></a>2、用命令模式改进的设计</h3><p>先给出整体代码结构图:</p><p><img src="images/18_command_03.png" alt="18_command_03.png"></p><p>以及整体的逻辑图:</p><p><img src="images/18_command_04.png" alt="18_command_04.png"></p><p>代码:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>控制灯的开关的两个命令类如下，另外还有两个控制电视的开关的两个类我就不写了，和下面的一样，<strong>拥有TV的引用</strong>，然后在<code>excute()</code>和<code>undo()</code>的时候调用对应的<code>on()</code>和<code>off()</code>即可。代码可以<a href="command/"><strong>看这里</strong></a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOnCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Light light <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//哪个电灯</span>    <span class="token keyword">public</span> <span class="token function">LightOnCommand</span><span class="token punctuation">(</span>Light light<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        light<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//直接打开</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        light<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//原来是打开的就是关掉</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOffCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Light light<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LightOffCommand</span><span class="token punctuation">(</span>Light light<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        light<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        light<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//原来是关掉的，现在就是打开</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后有一个特殊的<code>NoCommand</code>类，<strong>这个是当我们的遥控器的某个槽没有控制某个东西的时候设置的值</strong>，这个类很有用。比如我们想要控制某个槽，那个槽如果是空的，可能报空指针异常，但是如果一开始都赋值为<code>NoCommand</code>，就不会发生这种情况。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面看我们的新的遥控器类:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//控制类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Control</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Command<span class="token punctuation">[</span><span class="token punctuation">]</span> onCommands<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//一列的 开启按钮</span>    <span class="token keyword">private</span> Command<span class="token punctuation">[</span><span class="token punctuation">]</span> offCommands<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//一列 关闭按钮</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> slotNum <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//为了实现undo操作</span>    <span class="token keyword">private</span> Stack<span class="token operator">&lt;</span>Command<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Control</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//初始化</span>        offCommands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">[</span>slotNum<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//10排</span>        onCommands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">[</span>slotNum<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//下面就是NoCommand的作用, 并不是每一个按钮都对应着家电，有可能是空的,这样下面就不要判断是不是空了</span>        Command noCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> onCommands<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            onCommands<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> noCommand<span class="token punctuation">;</span>            offCommands<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> noCommand<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//遥控器并不知道绑定的是什么家具   解耦合</span>    <span class="token comment" spellcheck="true">//把命令对象设置到遥控器上 : 很重要 , 把命令封装成类 作为参数命令传进来，绑定到某个插槽</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnCommand</span><span class="token punctuation">(</span><span class="token keyword">int</span> slot<span class="token punctuation">,</span> Command onCommand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        onCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> onCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOffCommand</span><span class="token punctuation">(</span><span class="token keyword">int</span> slot<span class="token punctuation">,</span>Command offCommand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        offCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> offCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 下面是三个控制器执行的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token keyword">int</span> slot<span class="token punctuation">)</span><span class="token punctuation">{</span>        onCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token keyword">int</span> slot<span class="token punctuation">)</span><span class="token punctuation">{</span>        offCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>offCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//具体的回退   要回退的话，首先要记住按了哪些按钮， 可以使用栈的结构</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Light light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TV tv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LightOnCommand lightOnCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOnCommand</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span>        LightOffCommand lightOffCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOffCommand</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span>        TVOffCommand tvOffCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TVOffCommand</span><span class="token punctuation">(</span>tv<span class="token punctuation">)</span><span class="token punctuation">;</span>        TVOnCommand tvOnCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TVOnCommand</span><span class="token punctuation">(</span>tv<span class="token punctuation">)</span><span class="token punctuation">;</span>        Control control <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Control</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        control<span class="token punctuation">.</span><span class="token function">setOnCommand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> lightOnCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        control<span class="token punctuation">.</span><span class="token function">setOffCommand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> lightOffCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        control<span class="token punctuation">.</span><span class="token function">setOnCommand</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> tvOnCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        control<span class="token punctuation">.</span><span class="token function">setOffCommand</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> tvOffCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        control<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        control<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        control<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类似我们撤销(Ctrl + Z)的操作</span>        control<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出和原始设计一样。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>优点:  1、降低了系统耦合度。 2、新的命令可以很容易添加到系统中去；</p><p>缺点: 使用命令模式可能会导致某些系统有过多的具体命令类；</p><p>系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作，也可以考虑使用命令模式，见命令模式的扩展</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>责任链模式</title>
      <link href="/2019/06/16/16-ze-ren-lian-mo-shi/"/>
      <url>/2019/06/16/16-ze-ren-lian-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。</p><p>将这些对象连成一条链，并沿着这条链发送该请求，直到有一个对象处理它(或者可以有多个处理它)。</p><h2 id="二、结构"><a href="#二、结构" class="headerlink" title="二、结构"></a>二、结构</h2><p>基本结构:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/16_chain_01.png" alt="16_chain_01.png"></p><p>下面很好的解释了<code>Chain</code>和<code>ConcreteChain</code>的作用:</p><ul><li><strong>Chain (Handler)</strong> : This can be an interface which will primarily recieve the request and dispatches the request to chain of handlers. It has reference of only first handler in the chain and does not know anything about rest of the handlers.</li><li><strong>Concrete Chain ( handlers)</strong> : These are actual handlers of the request chained in some sequential order.</li></ul><p>简单来说，就是<code>Chain</code>是链里面所有处理方法的公共接口，然后链会有一个开始的起点处理器，然后我们的<code>request</code>会被这条链的处理器处理。</p><p>即需要先建立一个单向链表，然后调用方只需要调用头部节点就可以了，后面会自动流转下去。</p><h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><blockquote><p>我们要实现对一个文本字符串的过滤(比如某个网站，有人发表评论，我们需要过滤不好的信息)。</p></blockquote><p>代码组织结构:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/16_chain_02.png" alt="16_chain_02.png"></p><p>代码:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 也可以写成　Handler</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Chain</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">setNextChain</span><span class="token punctuation">(</span>Chain nextChain<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//也有写成successor的</span>    String <span class="token function">handle</span><span class="token punctuation">(</span>String request<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//也有写成 handleRequest</span><span class="token punctuation">}</span></code></pre><p>下面是实现<code>Chain</code>接口的三个处理类，<strong>它们组成了一条链(单链表)</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 链中的第一个处理 : ConcreteChain1 : 处理html代码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HTMLFilterChain</span> <span class="token keyword">implements</span> <span class="token class-name">Chain</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Chain nextChain<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNextChain</span><span class="token punctuation">(</span>Chain nextChain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextChain <span class="token operator">=</span> nextChain<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">handle</span><span class="token punctuation">(</span>String request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"&lt;html>"</span><span class="token punctuation">)</span> <span class="token operator">||</span> request<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"&lt;body>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            request <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"&lt;html>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"&lt;body>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 链式处理完</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nextChain <span class="token operator">!=</span> null<span class="token punctuation">)</span>            request <span class="token operator">=</span> nextChain<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> request<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 链中的第二个处理 : ConcreteChain2  : 处理敏感信息</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SensitiveFilterChain</span> <span class="token keyword">implements</span> <span class="token class-name">Chain</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Chain nextChain<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNextChain</span><span class="token punctuation">(</span>Chain nextChain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextChain <span class="token operator">=</span> nextChain<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">handle</span><span class="token punctuation">(</span>String request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"敏感"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            request <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"敏感"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 链式处理完</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nextChain <span class="token operator">!=</span> null<span class="token punctuation">)</span>            request <span class="token operator">=</span> nextChain<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> request<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 链中的第三个处理: ConcreteChain3 : 处理空格: 但是我们的测试例子中没有用到这个</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpaceFilterChain</span> <span class="token keyword">implements</span> <span class="token class-name">Chain</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Chain nextChain<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNextChain</span><span class="token punctuation">(</span>Chain nextChain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextChain <span class="token operator">=</span> nextChain<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">handle</span><span class="token punctuation">(</span>String request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            request <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 链式处理完</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nextChain <span class="token operator">!=</span> null<span class="token punctuation">)</span>            request <span class="token operator">=</span> nextChain<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> request<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Chain c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTMLFilterChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 过滤字符串的html</span>        Chain c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SensitiveFilterChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 过来字符串的敏感信息</span>        Chain c3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpaceFilterChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//过滤字符串的空格</span>        c1<span class="token punctuation">.</span><span class="token function">setNextChain</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 也可以通过构造函数设置某个的nextChain</span>        c2<span class="token punctuation">.</span><span class="token function">setNextChain</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span>        String notGoodStr <span class="token operator">=</span> <span class="token string">"&lt;html>爱祖国，爱人民，我很敏感&lt;body>"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 里面有html和敏感信息要去除(没有空格)</span>        notGoodStr <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>notGoodStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>notGoodStr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// good Str</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出:</p><pre class=" language-java"><code class="language-java">爱祖国，爱人民，我很</code></pre><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>给出自己参考的两个博客。</p><ul><li><a href="http://www.newthinktank.com/2012/10/chain-of-responsibility-design-pattern-tutorial/" target="_blank" rel="noopener">博客1</a>。</li><li><a href="https://www.geeksforgeeks.org/chain-responsibility-design-pattern/" target="_blank" rel="noopener">博客2</a>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 责任链模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>桥接模式</title>
      <link href="/2019/06/16/13-qiao-jie-mo-shi/"/>
      <url>/2019/06/16/13-qiao-jie-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><p>桥接模式属于结构型模式。</p><p>桥接模式其实只需要记住关键的一点: <strong>解决的是不同的子类之间排列组合可以构成巨多的类的问题</strong>。</p><p>比如:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/13_brige_01.png" alt="13_brige_01.png"></p><p>举个例子，你要画画了，画画本身是一个类，你画画要考虑画什么形状(<code>Shape</code>) (<code>A</code>)，你画画还需要考虑用什么颜色去画(<code>Color</code>)(<code>B</code>)。</p><p>形状可以有圆、长方形、正方形….，而颜色可以用红、蓝、绿…..。</p><p>那我现在要用蓝笔画长方形，这是一种新的组合，用红笔画长方形，又是一种组合，这样会产生很多的排列组合，如果我们都写一个类，那就是不好的设计了。</p><h2 id="二、案例"><a href="#二、案例" class="headerlink" title="二、案例"></a>二、案例</h2><p>就用上面那个画画的例子来引出我们的桥接模式。</p><p>我们的改造就是。不需要那个<code>A</code>类了，而是在形状类<code>B</code>类这边有这<code>C</code>类(这里改成接口， 也可以用类)的引用。</p><p>具体结构如下:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/13_bridge_02.png" alt="13_bridge_02.png"></p><p>然后还有一个关键的点:</p><p>注意一定要在<code>Shape</code>中有<code>ColorAPI</code>的引用，而且子类也要调用父类的构造函数。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ColorAPI</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>颜色(<code>B</code>)这边的三个实现类:    </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BluePen</span> <span class="token keyword">implements</span> <span class="token class-name">ColorAPI</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用蓝笔画 "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreenPen</span> <span class="token keyword">implements</span> <span class="token class-name">ColorAPI</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用绿笔画 "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedPen</span> <span class="token keyword">implements</span> <span class="token class-name">ColorAPI</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用红笔画 "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>形状这边的大父类(<code>A</code>):</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> ColorAPI colorAPI<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//这个父类必须要有 另一边的引用</span>    <span class="token keyword">protected</span> <span class="token function">Shape</span><span class="token punctuation">(</span>ColorAPI colorAPI<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>colorAPI <span class="token operator">=</span> colorAPI<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">dw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// color</span><span class="token punctuation">}</span></code></pre><p>形状的实现类:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Circle</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> ColorAPI colorAPI<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>colorAPI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        colorAPI<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> ColorAPI colorAPI<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>colorAPI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        colorAPI<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//桥接模式简单的说:  解决排列组合导致组合类巨多的问题</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Shape blueRectangle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token string">"长方形"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BluePen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blueRectangle<span class="token punctuation">.</span><span class="token function">dw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Shape redCircle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token string">"圆"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RedPen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redCircle<span class="token punctuation">.</span><span class="token function">dw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出:</p><pre class=" language-java"><code class="language-java">用蓝笔画 长方形用红笔画 圆</code></pre><p>再看一下整体框架图:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/13_bridge_03.png" alt="13_bridge_03.png"></p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>对于两个独立变化的维度，使用桥接模式再适合不过了。实现减少排列组合减少的类。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 桥接模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式(二)</title>
      <link href="/2019/06/16/12-dai-li-mo-shi-er/"/>
      <url>/2019/06/16/12-dai-li-mo-shi-er/</url>
      
        <content type="html"><![CDATA[<h1 id="代理模式-二"><a href="#代理模式-二" class="headerlink" title="代理模式(二)"></a>代理模式(二)</h1><h2 id="一、目的"><a href="#一、目的" class="headerlink" title="一、目的"></a>一、目的</h2><p>在代理模式(一)里面我们了解了<strong>静态代理、动态代理、CGLIB代理</strong>的基本使用。</p><p>这篇主要来将<code>JDK</code>动态代理底层的原理，以及有关<code>$Proxy0、InvocationHandler</code>相关的原理。</p><h2 id="二、模拟Java底层动态代理实现"><a href="#二、模拟Java底层动态代理实现" class="headerlink" title="二、模拟Java底层动态代理实现"></a>二、模拟Java底层动态代理实现</h2><h3 id="1、模拟TimeTankProxy但是封装在MyProxy中"><a href="#1、模拟TimeTankProxy但是封装在MyProxy中" class="headerlink" title="1、模拟TimeTankProxy但是封装在MyProxy中"></a>1、模拟<code>TimeTankProxy</code>但是封装在<code>MyProxy</code>中</h3><p>只是将<code>TankTimeProxy</code>封装在了Proxy内部，我们用动态编译(JDK1.6 Complier)在程序运行的时候动态生成<code>TankTimeProxy</code>类。</p><p>缺点: 只能对<code>TankTimeProxy</code>进行代理</p><p>下面我们初步模拟<code>JDK</code>内部动态代理，因为动态代理就是不能看到代理类，所以我们将代理类写到<code>MyProxy</code>内部，在程序运行的时候动态生成。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Movable</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tank</span> <span class="token keyword">implements</span> <span class="token class-name">Movable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 坦克移动</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Tank Moving......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 随机产生 1~5秒, 模拟坦克在移动　</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面看我们很重要的<code>MyProxy</code>类，它有一个静态方法<code>newProxyInstance()</code>可以用来生成代理对象:</p><p>注意这里 <code>package proxy.advance.one</code>是我要动态编译生成的那个代理类<code>TankTimeProxy</code>最后生成所在的包。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProxy</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 用来产生代理类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        String rt <span class="token operator">=</span> <span class="token string">"\n\r"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动态代理文件的源码 : 需要动态编译代码</span>        String src <span class="token operator">=</span> <span class="token string">"package proxy.advance.one;"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                <span class="token string">"public class TankTimeProxy implements Movable {"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                <span class="token string">"      private Movable tank;"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                <span class="token string">"      public TankTimeProxy(Movable tank) {"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                <span class="token string">"             this.tank = tank;"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                <span class="token string">"      }"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                <span class="token string">"     @Override"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                <span class="token string">"     public void move() {"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                <span class="token string">"          long start = System.currentTimeMillis();"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                <span class="token string">"          System.out.println(\"start time : \" + start);"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                <span class="token string">"          tank.move();"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                <span class="token string">"          long end = System.currentTimeMillis();"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                <span class="token string">"          System.out.println(\"end time : \" + end);"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                <span class="token string">"          System.out.println(\"spend all time : \" + (end - start)/1000 + \"s.\");"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                <span class="token string">"      }"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                <span class="token string">"}"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把源码写到java文件里</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/home/zxzxin/Java_Maven/DesignPatterns/src/main/java/proxy/advance/one/TankTimeProxy.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>  fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//下面的代理，就是动态编译</span>        <span class="token comment" spellcheck="true">//编译源码，生成class,注意编译环境要换成jdk才有compiler,单纯的jre没有compiler，会空指针错误</span>        JavaCompiler jc <span class="token operator">=</span> ToolProvider<span class="token punctuation">.</span><span class="token function">getSystemJavaCompiler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StandardJavaFileManager fileMgr <span class="token operator">=</span> jc<span class="token punctuation">.</span><span class="token function">getStandardFileManager</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文件管事器</span>        Iterable units <span class="token operator">=</span> fileMgr<span class="token punctuation">.</span><span class="token function">getJavaFileObjects</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//编译单元</span>        JavaCompiler<span class="token punctuation">.</span>CompilationTask t <span class="token operator">=</span> jc<span class="token punctuation">.</span><span class="token function">getTask</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> fileMgr<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> units<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译任务</span>        t<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileMgr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把类load到内存里 并　生成新对象       !!!!!注意:下面的home前面不要加 /</span>        URL<span class="token punctuation">[</span><span class="token punctuation">]</span> urls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"file:/"</span> <span class="token operator">+</span> <span class="token string">"home/zxzxin/Java_Maven/DesignPatterns/src/main/java/"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        URLClassLoader ul <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLClassLoader</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">c</span> <span class="token operator">=</span> ul<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"proxy.advance.one.TankTimeProxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//生成实例return c.newInstance();   //c.newInstance()会调用无参数的Constructor，若类没有无参的Constructor时会出错</span>        Constructor ctr <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>Movable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 可以得到带有参数的构造方法()</span>        <span class="token keyword">return</span> ctr<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Movable tank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 现在就是说删除了TankTimeProxy，还是要能实现动态代理</span>        Movable tankProxy <span class="token operator">=</span> <span class="token punctuation">(</span>Movable<span class="token punctuation">)</span> MyProxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 动态代理不需要写出代理类的名字</span>        tankProxy<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出: (和我们使用JDK动态代理一样的)</p><pre class=" language-java"><code class="language-java">start time <span class="token operator">:</span> <span class="token number">1551318534681</span>Tank Moving<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>end time <span class="token operator">:</span> <span class="token number">1551318536469</span>spend all time <span class="token operator">:</span> 1s<span class="token punctuation">.</span></code></pre><p>我们动态生成编译的类也在当前包下:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/12_proxy_01.png" alt="12_proxy_01.png"></p><h3 id="2、可以对任意接口进行代理，且可以自定义代理逻辑"><a href="#2、可以对任意接口进行代理，且可以自定义代理逻辑" class="headerlink" title="2、可以对任意接口进行代理，且可以自定义代理逻辑"></a>2、可以对任意接口进行代理，且可以自定义代理逻辑</h3><p>上面虽然实现了对JDK的动态代理的模拟，但是却只能对<code>Movable</code>接口进行代理，而且代理的逻辑只能是<code>TimeProxy</code>，下面我们来改进<code>MyProxy</code>类:</p><p>这里我们里面的那个字符串拼接代理类，不叫<code>TankTimeProxy</code>了，暂且叫<code>$MyProxy0</code>。</p><ul><li><p>首先，要实现对任意接口的任意方法代理：</p><ul><li>实现代理任意接口: 我们要把接口类型作为参数传给<code>MyProxy</code>的<code>newProxyInstance(Class inface)</code>；</li><li>代理接口的所有方法: 用<code>inface.getMethods()</code>取出所有方法，拼接实现方法的字符串(反射)；</li></ul></li><li><p>要实现代理的任意逻辑:</p><ul><li>要把代理逻辑抽离，应独立出一个策略接口: <code>MyInvocationHandler</code>接口，并接收被代理的对象及方法作为参数<code>invoke(Object o, Method m)；</code>；</li><li>而且需要把本身作为参数传给<code>MyProxy</code>的静态方法<code>newProxyInstance(Class inface, MyInvocationHandler h)</code> ；</li><li>而且我们具体的策略(<strong>即MyInvocationHandler的实现类</strong>)本身聚合被<strong>代理类target</strong>，以便在target的方法前后增加代理逻辑；</li><li>而且其中很重要的一步: <strong>我们需要把MyInvocationHandler</strong>作为成员遍历放到<code>$MyProxy0</code>中，而且在每一个代理方法内部，要调用被代理对象的原始方法，具体就是下面两行:</li></ul><pre class=" language-java"><code class="language-java"><span class="token string">"  Method md = "</span> <span class="token operator">+</span> inface<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".class.getMethod(\""</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\");"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>   <span class="token comment" spellcheck="true">//这个接口传入了 ,注意一定要写inface.getName</span><span class="token string">"  h.invoke(this, md);"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>比如传入Movable接口，里面有<span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法，则上面生成的代码是这样<span class="token operator">:</span>Method md <span class="token operator">=</span> proxy<span class="token punctuation">.</span>advance<span class="token punctuation">.</span>two<span class="token punctuation">.</span>Flyable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"fly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> md<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p>讲的差不多了，现在看代码实现:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/12_proxy_02.png" alt="12_proxy_02.png"></p><p>代码:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 能处理任何方法的    调用  只要给我一个Method就能对这个方法进行特殊的处理 * 特殊处理的方式是由子类(实现类)决定 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最重要的<code>MyProxy</code>类，传入了两个参数，分别是可以指定任意接口，以及指定任意逻辑。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProxy</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>Class <span class="token class-name">inface</span><span class="token punctuation">,</span> MyInvocationHandler h<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String rt <span class="token operator">=</span> <span class="token string">"\n\r"</span><span class="token punctuation">;</span>        String methodStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> inface<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取接口的所有方法 , 为所有这些方法都生成代理</span>        <span class="token comment" spellcheck="true">/*        原来固定的思路 : 只能对时间代理        for(Method m : methods) {            methodStr += "@Override" + rt +                         "public void " + m.getName() + "() {" + rt +                             "   long start = System.currentTimeMillis();" + rt +                            "   System.out.println(\"start time : \" + start);" + rt +                            "   t." + m.getName() + "();" + rt +                            "   long end = System.currentTimeMillis();" + rt +                            "   System.out.println("spend all time : " + (end - start)/1000 + "s.");" + rt +                         "}";        }        */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method m <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            methodStr <span class="token operator">+=</span> <span class="token string">"    @Override"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                    <span class="token string">"    public void "</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"(){"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                    <span class="token string">"       try {"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                    <span class="token string">"           Method md = "</span> <span class="token operator">+</span> inface<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".class.getMethod(\""</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\");"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>   <span class="token comment" spellcheck="true">//这个接口传入了 ,注意一定要写inface.getName</span>                    <span class="token string">"           h.invoke(this, md);"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                    <span class="token string">"       }catch(Exception e) {"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                    <span class="token string">"           e.printStackTrace();"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                    <span class="token string">"       }"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                    <span class="token string">"   }"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String src <span class="token operator">=</span>                <span class="token string">"package proxy.advance.two;"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                        <span class="token string">"import java.lang.reflect.Method;"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                        <span class="token string">"public class My$Proxy0 implements "</span> <span class="token operator">+</span> inface<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"{"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                        <span class="token string">"    proxy.advance.two.MyInvocationHandler h;"</span> <span class="token operator">+</span> rt <span class="token operator">+</span> <span class="token comment" spellcheck="true">//定义成员变量 MyInvocationHandler对象</span>                        <span class="token string">"    public My$Proxy0(MyInvocationHandler h) {"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                        <span class="token string">"        this.h = h;"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                        <span class="token string">"    }"</span> <span class="token operator">+</span> rt <span class="token operator">+</span>                        methodStr <span class="token operator">+</span> rt <span class="token operator">+</span>                        <span class="token string">"}"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把源码写到java文件里</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/home/zxzxin/Java_Maven/DesignPatterns/src/main/java/proxy/advance/two/My$Proxy0.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>        fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//下面的代理，就是动态编译</span>        <span class="token comment" spellcheck="true">//编译源码，生成class,注意编译环境要换成jdk才有compiler,单纯的jre没有compiler，会空指针错误</span>        JavaCompiler jc <span class="token operator">=</span> ToolProvider<span class="token punctuation">.</span><span class="token function">getSystemJavaCompiler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StandardJavaFileManager fileMgr <span class="token operator">=</span> jc<span class="token punctuation">.</span><span class="token function">getStandardFileManager</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文件管事器</span>        Iterable units <span class="token operator">=</span> fileMgr<span class="token punctuation">.</span><span class="token function">getJavaFileObjects</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//编译单元</span>        JavaCompiler<span class="token punctuation">.</span>CompilationTask t <span class="token operator">=</span> jc<span class="token punctuation">.</span><span class="token function">getTask</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> fileMgr<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> units<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译任务</span>        t<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileMgr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把类load到内存里 并　生成新对象       !!!!!注意:下面的home前面不要加 /</span>        URL<span class="token punctuation">[</span><span class="token punctuation">]</span> urls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"file:/"</span> <span class="token operator">+</span> <span class="token string">"home/zxzxin/Java_Maven/DesignPatterns/src/main/java/"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        URLClassLoader ul <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLClassLoader</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">c</span> <span class="token operator">=</span> ul<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"proxy.advance.two.My$Proxy0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println("Class c : " + c);</span>        <span class="token comment" spellcheck="true">// 这是之前的</span>        <span class="token comment" spellcheck="true">//  生成实例return c.newInstance();   //c.newInstance()会调用无参数的Constructor，若类没有无参的Constructor时会出错</span><span class="token comment" spellcheck="true">//        Constructor ctr = c.getConstructor(Movable.class);   // 可以得到带有参数的构造方法()</span><span class="token comment" spellcheck="true">//        return ctr.newInstance(new Tank());</span>        Constructor ctr <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>MyInvocationHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 哪个处理器实现，就创建这个类的实例对象　</span>        Object m <span class="token operator">=</span> ctr<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> m<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>看一个指定时间逻辑的实现类:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTimeInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MyInvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//注意是 Object,这样可以对任意对象进行时间的代理</span>    <span class="token keyword">public</span> <span class="token function">MyTimeInvocationHandler</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在前面做一些事情: 记录开始时间</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start time : "</span> <span class="token operator">+</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"proxy : "</span> <span class="token operator">+</span> proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印proxy 到底是什么</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"target : "</span> <span class="token operator">+</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印 target 到底是什么</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用 target的方法</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end time : "</span> <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"spend all time : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">+</span> <span class="token string">"s."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试: (这里我加了一个<code>Flyable</code>和<code>Plane</code>)，测试可以放入任意接口(这两个类在代理模式(一)中也有，代码很简单，就不贴了):</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//　可以生成实现了任何接口的代理, 只要把接口传进去就可以了</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Movable tank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyInvocationHandler timeHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTimeInvocationHandler</span><span class="token punctuation">(</span>tank<span class="token punctuation">)</span><span class="token punctuation">;</span>        Movable tankProxy <span class="token operator">=</span> <span class="token punctuation">(</span>Movable<span class="token punctuation">)</span> MyProxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>Movable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> timeHandler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 传入类的.class即可</span>        tankProxy<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Flyable plane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Plane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        timeHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTimeInvocationHandler</span><span class="token punctuation">(</span>plane<span class="token punctuation">)</span><span class="token punctuation">;</span>        Flyable planeProxy <span class="token operator">=</span> <span class="token punctuation">(</span>Flyable<span class="token punctuation">)</span> MyProxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>Flyable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> timeHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        planeProxy<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/12_proxy_03.png" alt="12_proxy_03.png"></p><p>看我们在包下生成的<code>MyProxy0</code>类的内容:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/12_proxy_04.png" alt="12_proxy_04.png"></p><p>现在再看这个整体的框架联系图，应该就比较清晰了:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/12_proxy_05.png" alt="12_proxy_05.png"></p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>在上面的主程序测试类中，当调用<code>tank.move()</code>的时候，就会调用<code>invoke(this, md)</code>，而这个<code>md</code>就是具体实现<code>MyInvocationHandler</code>接口的<code>MyTimeProxyInvocation</code>的方法， 也就是<code>invoke()</code>(在这个方法中我们在前后加了自己的逻辑)方法。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式(一)</title>
      <link href="/2019/06/16/11-dai-li-mo-shi-yi/"/>
      <url>/2019/06/16/11-dai-li-mo-shi-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="代理模式-一"><a href="#代理模式-一" class="headerlink" title="代理模式(一)"></a>代理模式(一)</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><p>代理模式是对象的结构模式。</p><p><strong>代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用(接口的引用)</strong></p><h2 id="二、静态代理"><a href="#二、静态代理" class="headerlink" title="二、静态代理"></a>二、静态代理</h2><p>静态代理是指，代理类在程序运行前就已经定义好，其与<strong>目标类(被代理类)</strong>的关系在程序运行前就已经确立。</p><p>静态代理类似于企业与企业的法律顾问间的关系。<strong>法律顾问与企业的代理关系，并不是在“官司“发生后才建立的，而是之前就确立好的一种关系</strong>。</p><p>而动态代理就是外面打官司一样，是官司发生了之后临时请的律师。</p><p>代理可以看做就是在被代理对象外面包裹一层（和装饰者类似但又不同）:</p><p><strong>案例: 比如我们有一个可以移动的坦克，它的主要方法是<code>move()</code>，但是我们需要记录它移动的时间，以及在它移动前后做日志，其静态代理的实现模式就类似下面的图</strong>:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/11_proxy_01.png" alt="11_proxy_01.png"></p><p>两个代理类以及结构关系:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/11_proxy_02.png" alt="11_proxy_02.png"></p><p>代码:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Movable</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tank</span> <span class="token keyword">implements</span> <span class="token class-name">Movable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 坦克移动</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Tank Moving......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 随机产生 1~5秒, 模拟坦克在移动　</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>两个代理类: <code>TankTimeProxy</code>和<code>TankLogProxy</code>:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TankTimeProxy</span> <span class="token keyword">implements</span> <span class="token class-name">Movable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Movable tank<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TankTimeProxy</span><span class="token punctuation">(</span>Movable tank<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tank <span class="token operator">=</span> tank<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在前面做一些事情: 记录开始时间</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start time : "</span> <span class="token operator">+</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>        tank<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在后面做一些事情: 记录结束时间,并计算move()运行时间</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end time : "</span> <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"spend all time : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span> <span class="token operator">+</span> <span class="token string">"s."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TankLogProxy</span> <span class="token keyword">implements</span> <span class="token class-name">Movable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Movable tank<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TankLogProxy</span><span class="token punctuation">(</span>Movable tank<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tank <span class="token operator">=</span> tank<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// tank 移动前记录日志</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Tank Log start......."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tank<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// tank 移动后记录日志</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Tank Log end......."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Movable target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TankLogProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TankTimeProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//先记录时间，再记录日志</span><span class="token comment" spellcheck="true">//        Movable target = new TankTimeProxy(new TankLogProxy(new Tank())); //先记录日志，再记录时间</span>        target<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出:</p><pre class=" language-java"><code class="language-java">Tank Log start<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>start time <span class="token operator">:</span> <span class="token number">1551271511619</span>Tank Moving<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>end time <span class="token operator">:</span> <span class="token number">1551271514522</span>spend all time <span class="token operator">:</span> 2s<span class="token punctuation">.</span>Tank Log end<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>这其中有两个很重要的点，那就是:</p><ul><li>两个代理对象内部都<strong>有着被代理对象(target)实现的接口的引用</strong>；</li><li>且两个代理对象都<strong>实现了被代理对象(target)实现的接口</strong>；</li></ul><h2 id="三、基本动态代理"><a href="#三、基本动态代理" class="headerlink" title="三、基本动态代理"></a>三、基本动态代理</h2><p>上面静态代理的缺点在哪?</p><p><strong>现在单看做时间这个代理，如果我们现在多了一个飞机，飞机里面的方法是<code>fly()</code>，现在要给飞机做代理，那么我们不能用之前写的<code>TankTimeProxy</code>，我们需要额外的写一个<code>PlaneTimeProxy</code>，这明显是冗余代码，所以这就是静态代理最大的缺点，这可以用动态代理解决</strong>。</p><p>动态代理是指，<strong>程序在整个运行过程中根本就不存在目标类的代理类(在JDK内部叫<code>$Proxy0</code>，我们看不到)</strong>，目标对象的代理对象只是由代理生成工具(如代理工厂类) 在程序运行时由 JVM 根据反射等机制动态生成的。代理对象与目标对象的代理关系在程序运行时才确立。</p><p>对比静态代理，静态代理是指在程序运行前就已经定义好了目标类的代理类。代理类与目标类的代理关系在程序运行之前就确立了。</p><p>首先看动态代理的一些特点:</p><ul><li>动态代理不需要写出代理类的名字，你要的代理对象我直接给你产生，是使用的时候生成的；</li><li>只需要调用<code>Proxy.newProxyInstance()</code>就可以给你产生代理类；</li></ul><p>JDK动态代理相关API:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/12_proxy_07.png" alt="12_proxy_07.png"></p><p>下面看使用动态代理解决上面的问题(可以用<code>TimeProxy</code>代理一切对象):</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Movable</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tank</span> <span class="token keyword">implements</span> <span class="token class-name">Movable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 坦克移动</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Tank Moving......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 随机产生 1~5秒, 模拟坦克在移动　</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>新增的飞机:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Flyable</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Plane</span> <span class="token keyword">implements</span> <span class="token class-name">Flyable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Plane Flying......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 随机产生 1~5秒, 飞机在飞行　</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们的关键处理，即编写<code>MyTimeProxyInvocationHandler</code>:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 静态代理做不到既为飞机做时间代理，又为坦克做时间代理，但是动态代理可以为所有对象做代理</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTimeProxyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意这里是 Object ，不是Movable或者Flyable</span>    <span class="token keyword">public</span> <span class="token function">MyTimeProxyInvocationHandler</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// proxy  : 代理对象  可以是一切对象 (Object)</span>    <span class="token comment" spellcheck="true">// method : 目标方法</span>    <span class="token comment" spellcheck="true">// args   : 目标方法的参数</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在前面做一些事情: 记录开始时间</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start time : "</span> <span class="token operator">+</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用目标方法  invoke是调用的意思, 可以有返回值的方法(我们这里move和fly都没有返回值)</span>        <span class="token comment" spellcheck="true">// 在后面做一些事情: 记录结束时间,并计算move()运行时间</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end time : "</span> <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"spend all time : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span> <span class="token operator">+</span> <span class="token string">"s."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后测试类:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Movable tank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//可以为所有对象产生时间代理的 InvocationHandler</span>        MyTimeProxyInvocationHandler myInvocationHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTimeProxyInvocationHandler</span><span class="token punctuation">(</span>tank<span class="token punctuation">)</span><span class="token punctuation">;</span>        Movable tankProxy <span class="token operator">=</span> <span class="token punctuation">(</span>Movable<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>                tank<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                tank<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                myInvocationHandler        <span class="token punctuation">)</span><span class="token punctuation">;</span>        tankProxy<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Flyable plane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Plane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myInvocationHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTimeProxyInvocationHandler</span><span class="token punctuation">(</span>plane<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 为飞机产生代理, 为..产生代理，这样可以为很多东西产生代理，静态代理做不到</span>        Flyable planeProxy <span class="token operator">=</span> <span class="token punctuation">(</span>Flyable<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>                plane<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                plane<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                myInvocationHandler        <span class="token punctuation">)</span><span class="token punctuation">;</span>        planeProxy<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出(同时为<code>Tank</code>和<code>Plane</code>做了代理):</p><pre class=" language-java"><code class="language-java">start time <span class="token operator">:</span> <span class="token number">1551275526486</span>Tank Moving<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>end time <span class="token operator">:</span> <span class="token number">1551275531193</span>spend all time <span class="token operator">:</span> 4s<span class="token punctuation">.</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>start time <span class="token operator">:</span> <span class="token number">1551275531195</span>Plane Flying<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>end time <span class="token operator">:</span> <span class="token number">1551275532996</span>spend all time <span class="token operator">:</span> 1s<span class="token punctuation">.</span></code></pre><p>我们分析一下这个代理过程:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/11_proxy_03.png" alt="11_proxy_03.png"></p><p>调用过程(重要):</p><ul><li>JDK内部的<code>Proxy</code>类在内部创建了一个<code>$Proxy0</code>的代理对象(它实现了目标对象所在接口<code>Movable</code>；</li><li><code>$Proxy0</code>内部有<code>InvocationHandler</code>接口的引用，然后在<code>$Proxy</code>中调用了接口的<code>invoke()</code>方法；</li><li>而我们将<code>InvocationHandler</code>接口的实现类传入了<code>Proxy</code>，所以我们在实现类中加入的前后逻辑就会得到执行；</li></ul><p>如果这里还不够理解，可以看代理模式(二)，会模拟实现JDK的底层实现。</p><h2 id="四、CGLIB动态代理"><a href="#四、CGLIB动态代理" class="headerlink" title="四、CGLIB动态代理"></a>四、CGLIB动态代理</h2><p>问题: 使用 JDK 的 Proxy 实现代理，要求目标类与代理类实现相同的接口。<strong>若目标类不存在接口，则无法使用该方式实现</strong>。</p><p>可以用 CGLIB 来解决上面的问题。</p><p>CGLIB 代理的生成原理是<strong>生成目标类的子类，而子类是增强过的，这个子类对象就是代理对象</strong>。</p><p>所以，使用CGLIB 生成动态代理，<strong>要求目标类必须能够被继承，即不能是 final 的类</strong>。 </p><p>基本结构:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/12_proxy_06.png" alt="12_proxy_06.png"></p><p>代码:</p><p><code>Tank</code>类(没有接口)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 没有实现接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tank</span>   <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 坦克移动</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Tank Moving......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 随机产生 1~5秒, 模拟坦克在移动　</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>MyCglibFactory</code>类:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>Enhancer<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>MethodInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>MethodProxy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//需要实现MethodInterceptor, 当前这个类的对象就是一个回调对象</span><span class="token comment" spellcheck="true">// MyCglibFactory 是 类A，它调用了Enhancer(类B)的方法: setCallback(this)，而且将类A对象传给了类B</span><span class="token comment" spellcheck="true">// 而类A 的 方法intercept会被类B的 setCallback调用，这就是回调设计模式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCglibFactory</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//public interface MethodInterceptor extends Callback</span>    <span class="token keyword">private</span> Tank target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyCglibFactory</span><span class="token punctuation">(</span>Tank target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Tank <span class="token function">myCglibCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置需要代理的对象 :  目标类(target) , 也是父类</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>Tank<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置代理对象， 这是回调设计模式:  设置回调接口对象 :</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this代表当前类的对象，因为当前类实现了Callback</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Tank<span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 这个就是回调方法（类A的方法）</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> MethodProxy proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在前面做一些事情: 记录开始时间</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start time : "</span> <span class="token operator">+</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在后面做一些事情: 记录结束时间,并计算move()运行时间</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end time : "</span> <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"spend all time : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span> <span class="token operator">+</span> <span class="token string">"s."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试: </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Tank proxyTank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCglibFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">myCglibCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyTank<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出(进行了时间代理<code>TimeProxy</code>):</p><pre class=" language-java"><code class="language-java">start time <span class="token operator">:</span> <span class="token number">1551327522964</span>Tank Moving<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>end time <span class="token operator">:</span> <span class="token number">1551327526214</span>spend all time <span class="token operator">:</span> 3s<span class="token punctuation">.</span></code></pre><blockquote><p> 上面的设计模式用到了回调设计模式:<br> 在 Java 中，类 <code>A</code>调用类 <code>B</code> 中的某个方法 <code>b()</code>，然后类 <code>B</code> 又在某个时候反过来调用类 <code>A</code>中的某个方法 <code>a()</code>，对于 <code>A</code>来说，这个<code>a()</code> 方法便叫做回调方法。</p><p> Java 的接口提供了一种很好的方式来实现方法回调。这个方式就是定义一个简单的接口，在接口之中定义一个我们希望回调的方法。这个接口称为回调接口。(<code>Callback</code>) 在前面的例子中，我们定义的 <code>MyCglibFactory</code> 类就相当于前面所说的 <code>A</code>类，而 <code>Enhancer</code> 类则是 <code>B</code> 类。<code>A</code> 类中调用了<code>Enhancer</code> 类的 <code>setCallback(this)</code>方法，并将回调对象 <code>this</code> 作为实参传递给了Enhancer 类。Enhancer 类在后续执行过程中，会调用<code>A</code>类中的<code>intercept()</code>方法，<strong>这个 intercept()方法就是回调方法</strong>。 </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代理模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代器模式</title>
      <link href="/2019/06/16/10-die-dai-qi-mo-shi/"/>
      <url>/2019/06/16/10-die-dai-qi-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><p>迭代器模式属于行为型模式。</p><p>这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。</p><p>如果我们需要统一遍历不同的集合(容器)，也可以利用迭代器模式解决(下面的案例就是解决这个问题)。</p><h2 id="二、结构"><a href="#二、结构" class="headerlink" title="二、结构"></a>二、结构</h2><p>结构:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/10_iterator_01.png" alt="10_iterator_01.png"></p><ul><li><code>Container</code> 是聚合类，其中 <code>getIterator()</code> 方法可以产生一个 <code>Iterator</code>；</li><li><code>Iterator</code> 主要定义了 <code>hasNext()</code> 和 <code>next()</code> 方法；</li><li>每一个<code>Container</code>的实现类都会有一个具体的<code>Iterator</code>实现类来帮助实现迭代；</li></ul><h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><blockquote><p>实现两个容器能够统一遍历。(或者两个以上)</p></blockquote><p>先看代码结构: (<strong>这里我将两个迭代器实现类写在两个容器内部</strong>)</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/10_iterator_02.png" alt="10_iterator_02.png"></p><p>代码:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Container</span> <span class="token punctuation">{</span>    Iterator <span class="token function">getIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    E <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>两个容器类，他们内部的容器不同，内部有自带不同的迭代器:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteContainer1</span> <span class="token keyword">implements</span> <span class="token class-name">Container</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ConcreteContainer1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator <span class="token function">getIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteIterator1</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteIterator1</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> index<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Object <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> arr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteContainer2</span> <span class="token keyword">implements</span> <span class="token class-name">Container</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ArrayList arr<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ConcreteContainer2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> arr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator <span class="token function">getIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteIterator1</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteIterator1</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> index<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Object <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 如果不这么做，需要区分c1和c2的遍历方式, 一个是数组，一个是List</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Container c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteContainer1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Container c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteContainer2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Iterator<span class="token operator">></span>its <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        its<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将c1迭代器加入its</span>        its<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token function">getIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将c1迭代器加入its</span>        <span class="token comment" spellcheck="true">// 实现了统一遍历, 只需要将迭代器加入到 its中即可</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Iterator it <span class="token operator">:</span> its<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre class=" language-java"><code class="language-java"><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> </code></pre><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>优点:</p><ul><li>在同一个聚合上可以有多个遍历；</li><li>在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 迭代器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板方法模式</title>
      <link href="/2019/06/16/09-mo-ban-fang-fa-mo-shi/"/>
      <url>/2019/06/16/09-mo-ban-fang-fa-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><p><strong>模板方法模式是类的行为模式。准备一个抽象类，将部分逻辑以具体方法以及具体构造函数的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。这就是模板方法模式的用意。</strong></p><blockquote><p>例如: 在现实生活中，完成某件事情是需要 n 个固定步骤的。如”在淘宝进行购物”这件事情的完成一般需要三个步骤: <strong>登录网站、挑选商品、 付款</strong>。但对于登录网站与付款这两步，每个人几乎都是相同的操作。但不同的地方是，每个人所挑选的商品是不同的。<br>在软件开发过程中同样存在这样的情况。某类的某个方法的实现，需要几个固定步骤。在这些固定步骤中,对于该类的不同对象， 有些步骤的实现是固定不变的，有些步骤的实现是大相径庭的，有些步骤的实现是可变可不变的。对于这种情况，就适合使用模板方法设计模式编程。</p></blockquote><h2 id="二、结构"><a href="#二、结构" class="headerlink" title="二、结构"></a>二、结构</h2><p>基本结构:</p><p>在模板方法设计模式中，存在一个<strong>父类</strong>(一般是<strong>抽象</strong>的)。其中包含 两类方法:  模板方法 和 3 种步骤方法；</p><ul><li>模板方法: 即实现某种算法的方法步骤。这些步骤都是调用的步骤方法实现的。</li><li>步骤方法:即完成模板方法的每个阶段性方法。<ul><li>抽象方法: 子类必须实现的方法。即子类的个性化定义；</li><li>最终方法(固定方法): 子类不能重写的方法，即所有子类都要做的步骤；</li><li>钩子方法: 父类给了默认实现，子类可以重写，也可以不重写的方法；</li></ul></li></ul><p>结构:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/09_template_02.png" alt="09_template_02.png"></p><h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><blockquote><p>实现在网站上购物的案例。</p></blockquote><p>基本逻辑图:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/09_template_01.png" alt="09_template_01.png"></p><p>代码:</p><p>首先看<code>Shopping</code>类:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Shopping</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 模板方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyGoods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">useLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//固定的方法，子类不能重写</span>        <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//抽象方法，子类必须实现</span>        <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//钩子方法(hook)，子类可以重写</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 固定方法(最终方法)</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">useLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 钩子方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用银联支付"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后是两个子类:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShoesShopping</span> <span class="token keyword">extends</span> <span class="token class-name">Shopping</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"购买Nike鞋子!!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClothesShopping</span> <span class="token keyword">extends</span> <span class="token class-name">Shopping</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"购买海澜之家男装!!!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 重写了钩子方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用支付宝支付"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Shopping shoesShopping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShoesShopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shoesShopping<span class="token punctuation">.</span><span class="token function">buyGoods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Shopping clothesShopping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClothesShopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        clothesShopping<span class="token punctuation">.</span><span class="token function">buyGoods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre class=" language-java"><code class="language-java">用户登录购买Nike鞋子<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>使用银联支付<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>用户登录购买海澜之家男装<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>使用支付宝支付</code></pre><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>有时候为了防止恶意操作，模板方法也会加上 <code>final</code> 关键词。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板方法模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式(二)</title>
      <link href="/2019/06/16/08-gua-pei-qi-mo-shi-er/"/>
      <url>/2019/06/16/08-gua-pei-qi-mo-shi-er/</url>
      
        <content type="html"><![CDATA[<h1 id="适配器模式-二"><a href="#适配器模式-二" class="headerlink" title="适配器模式(二)"></a>适配器模式(二)</h1><h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><p>之所以要写适配器模式（二），是因为想强化一下练习。</p><p>而且在SpringMVC中有很多处理器适配器。</p><p>里面的源码包括一些特定的代码结构，例如<code>isSupport()</code>方法。</p><p>也就是说适配器还可以这么来用: <strong>使得原本由于接口不兼容而不能一起工作、不能统一管理的那些类可以在一起工作、可以进行统一管理</strong>。</p><h2 id="二、案例"><a href="#二、案例" class="headerlink" title="二、案例"></a>二、案例</h2><blockquote><p>需求: 厨师的工作是 <code>cook()</code>，程序员的工作是 <code>program()</code>，司机的工作是 <code>drive()</code>，教师的工作是 <code>teach()</code>，不同的工种，其具体工作内容不同。现在程序要将这些<strong>很多个</strong> 不同工种的工作内容全部输出。</p></blockquote><p>两种解决方案，其中使用适配器的又可以分为两种。</p><ul><li>解决方案一: 逐个访问每个工种对象的相应工作方法。无法循环遍历，无法统一管理。</li><li>解决方案二: 使用适配器模式，将这些不兼容的具体工作转换成一个统一的工作。实现循环遍历。</li></ul><p>为了代码简单，这里只写两个工种。<code>cooker</code>和<code>programer</code>。</p><h3 id="1、不使用适配器模式"><a href="#1、不使用适配器模式" class="headerlink" title="1、不使用适配器模式"></a>1、不使用适配器模式</h3><p>若不使用适配器模式，则调用者需要定义出所有的工种对象, 然后逐个工种对象的工作方法进行调用。有 30 个工种，就应调用 30 个工作方法。很麻烦。</p><p>结构如下:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/08_adapter_01.png" alt="08_adapter_01.png"></p><p>先看两个工种和实现类代码:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICooker</span> <span class="token punctuation">{</span>    String <span class="token function">cook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * ICooker的实现类 ：黄焖鸡厨师 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HmJCooker</span> <span class="token keyword">implements</span> <span class="token class-name">ICooker</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">cook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"制作黄焖鸡!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IProgrammer</span> <span class="token punctuation">{</span>    String <span class="token function">programme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 程序员的实现类:  京东的程序员 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDProgrammer</span> <span class="token keyword">implements</span> <span class="token class-name">IProgrammer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">programme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"编写京东的网站!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 这就是为什么要使用 适配器模式 * 这样的话  如果有很多接口的话,就会使得遍历非常的麻烦 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ICooker iCooker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HmJCooker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IProgrammer iProgrammer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDProgrammer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//上报自己的职责  不能循环遍历</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iCooker<span class="token punctuation">.</span><span class="token function">cook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iProgrammer<span class="token punctuation">.</span><span class="token function">programme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2、只定义一个适配器实现类"><a href="#2、只定义一个适配器实现类" class="headerlink" title="2、只定义一个适配器实现类"></a>2、只定义一个适配器实现类</h3><p>这种方式类似于多功能充电器，一个电源插头上接着多种类型的充电接口。用户在使用时需要使用电器接口与多功能充电器上的充电接口逐个进行对比，接口匹配，则可以充电。</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/08_adapter_02.png" alt="08_adapter_02.png"></p><p>代码:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkAdapter</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">work</span><span class="token punctuation">(</span>Object worker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String workContent <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 若传来的对象是厨师，就调用cook()方法</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>worker <span class="token keyword">instanceof</span> <span class="token class-name">ICooker</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            workContent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ICooker<span class="token punctuation">)</span>worker<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>worker <span class="token keyword">instanceof</span> <span class="token class-name">IProgrammer</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            workContent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>IProgrammer<span class="token punctuation">)</span>worker<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">programme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> workContent<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类（可以实现循环遍历）:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这个是两个工作者</span>        ICooker iCooker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HmJCooker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IProgrammer iProgrammer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDProgrammer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> workers <span class="token operator">=</span> <span class="token punctuation">{</span>iCooker<span class="token punctuation">,</span> iProgrammer<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建设配器对象</span>        WorkAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//让每个工种对象在设配器中进行匹配</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object worker <span class="token operator">:</span>  workers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String workContent <span class="token operator">=</span> adapter<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>workContent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出:</p><pre class=" language-java"><code class="language-java">制作黄焖鸡<span class="token operator">!</span>编写京东的网站<span class="token operator">!</span></code></pre><h3 id="3、为每个工种定义一个适配器类"><a href="#3、为每个工种定义一个适配器类" class="headerlink" title="3、为每个工种定义一个适配器类"></a>3、为每个工种定义一个适配器类</h3><p>这种用的最多。因为不同的电器需要不同的充电器。(很少上面这种组合充电器)，而且SpringMVC里面也是用的这种方式。</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/08_adapter_03.png" alt="08_adapter_03.png"></p><p>代码:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 统一的 接口适配器 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IWorkerAdapter</span> <span class="token punctuation">{</span>    String <span class="token function">work</span><span class="token punctuation">(</span>Object worker<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//只能放Object，因为传进来的可以实现不同的接口</span>    <span class="token keyword">boolean</span> <span class="token function">isSupport</span><span class="token punctuation">(</span>Object worker<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>厨师的适配器:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookerAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">IWorkerAdapter</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">work</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ICooker<span class="token punctuation">)</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSupport</span><span class="token punctuation">(</span>Object worker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>worker <span class="token keyword">instanceof</span> <span class="token class-name">ICooker</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>程序员的适配器:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProgrammerAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">IWorkerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">work</span><span class="token punctuation">(</span>Object worker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>IProgrammer<span class="token punctuation">)</span>worker<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">programme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSupport</span><span class="token punctuation">(</span>Object worker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> worker <span class="token keyword">instanceof</span> <span class="token class-name">IProgrammer</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> List<span class="token operator">&lt;</span>IWorkerAdapter<span class="token operator">></span> adapters<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这个是两个工作者</span>        ICooker iCooker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HmJCooker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IProgrammer iProgrammer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDProgrammer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> workers <span class="token operator">=</span> <span class="token punctuation">{</span>iCooker<span class="token punctuation">,</span> iProgrammer<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加所有的适配器</span>        adapters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        adapters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CookerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        adapters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProgrammerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//让每个工种对象在设配器中进行匹配</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object worker <span class="token operator">:</span> workers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            IWorkerAdapter adapter <span class="token operator">=</span> <span class="token function">getAdapter</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//   获取对应的适配器</span>            String workContent <span class="token operator">=</span> adapter<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//  对应的适配器进行对应的充电吧</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>workContent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取指定的某个适配器</span>    <span class="token keyword">static</span> IWorkerAdapter <span class="token function">getAdapter</span><span class="token punctuation">(</span>Object worker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>IWorkerAdapter adapter <span class="token operator">:</span> adapters<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>adapter<span class="token punctuation">.</span><span class="token function">isSupport</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> adapter<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出和上面一样。</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>从这种角度来看，<strong>适配器不是冒充，而是实现统一管理</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 适配器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式(一)</title>
      <link href="/2019/06/16/07-gua-pei-qi-mo-shi-yi/"/>
      <url>/2019/06/16/07-gua-pei-qi-mo-shi-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="适配器模式-一"><a href="#适配器模式-一" class="headerlink" title="适配器模式(一)"></a>适配器模式(一)</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><p>将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作无间。</p><p>可以将适配器理解为我们日常用的电脑充电器: 家庭电压为<code>220V</code>，而电脑充电频率是<code>20V</code>左右，所以需要适配。</p><h2 id="二、结构"><a href="#二、结构" class="headerlink" title="二、结构"></a>二、结构</h2><p>适配器可以分为两种: 对象适配器和类适配器。</p><p><strong>对象适配器</strong>:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/07_adapter_01.png" alt="07_adapter_01.png"></p><p>从用户的角度看不到<strong>被适配者</strong>。</p><p>用户调用适配器转换出来的目标接口方法。适配器再调用被适配者的相关接口方法。</p><p>用户收到反馈结果，感觉只是和目标接口交互。</p><p><strong>类适配器</strong>:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/07_adapter_05.png" alt="07_adapter_05.png"></p><p>通过多重继承目标接口和被适配者类方式来实现适配。</p><h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><blockquote><p>案例: 将火鸡冒充成鸭子。</p></blockquote><h3 id="1、对象适配器模式"><a href="#1、对象适配器模式" class="headerlink" title="1、对象适配器模式"></a>1、对象适配器模式</h3><p>逻辑图:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/07_adapter_03.png" alt="07_adapter_03.png"></p><p>代码组织结构图:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/07_adapter_02.png" alt="07_adapter_02.png"></p><p>被适配者火鸡<code>Turkey</code>:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Turkey</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">gobble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 火鸡叫声</span>    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 野火鸡 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WildTurkey</span> <span class="token keyword">implements</span> <span class="token class-name">Turkey</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gobble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Go Go!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am Flying a short distance!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>目标对象<code>Duck</code>:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 鸭子的接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//鸭子叫声</span>    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>适配器<code>TurkeyAdapter</code>:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 在外面表现是 鸭子(目标)，但是实质是火鸡(被适配者) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TurkeyAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//实现目标的接口</span>    <span class="token keyword">private</span> Turkey turkey<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这种对象型适配器必须要组合  被适配者，也就是要有适配者的引用</span>    <span class="token keyword">public</span> <span class="token function">TurkeyAdapter</span><span class="token punctuation">(</span>Turkey turkey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>turkey <span class="token operator">=</span> turkey<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 实际是火鸡在叫</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        turkey<span class="token punctuation">.</span><span class="token function">gobble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//外面表现是quack,但是内部是turkey.gobble()</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//由于火鸡飞的短，所以多飞几次，让火鸡更像鸭子</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            turkey<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        WildTurkey turkey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WildTurkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Duck duck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TurkeyAdapter</span><span class="token punctuation">(</span>turkey<span class="token punctuation">)</span><span class="token punctuation">;</span>        duck<span class="token punctuation">.</span><span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//看似是鸭子，其实内置是火鸡</span>        duck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出:</p><pre class=" language-java"><code class="language-java">Go Go<span class="token operator">!</span>I am Flying a <span class="token keyword">short</span> distance<span class="token operator">!</span>I am Flying a <span class="token keyword">short</span> distance<span class="token operator">!</span>I am Flying a <span class="token keyword">short</span> distance<span class="token operator">!</span>I am Flying a <span class="token keyword">short</span> distance<span class="token operator">!</span>I am Flying a <span class="token keyword">short</span> distance<span class="token operator">!</span>I am Flying a <span class="token keyword">short</span> distance<span class="token operator">!</span></code></pre><h3 id="2、类适配器模式"><a href="#2、类适配器模式" class="headerlink" title="2、类适配器模式"></a>2、类适配器模式</h3><p>基本结构图:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/07_adapter_04.png" alt="07_adapter_04.png"></p><p>虽然Java不支持多继承，但是可以实现的同时继承。</p><p>只有<code>TurkeyAdapter</code>有一些代码变动，其他不变:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 和 对象适配器模式唯一的不同就是  : 适配器直接继承 被适配者 (而不是组合) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TurkeyAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">WildTurkey</span> <span class="token keyword">implements</span>  <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">gobble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//直接继承 被适配者</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//让火鸡飞6次，飞的像鸭子</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TurkeyAdapter duck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TurkeyAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//直接new即可</span>        duck<span class="token punctuation">.</span><span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        duck<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出和上面对象适配器一样。</p><h3 id="3、Java中从以前枚举器Enumeration到迭代器Iterator的适配"><a href="#3、Java中从以前枚举器Enumeration到迭代器Iterator的适配" class="headerlink" title="3、Java中从以前枚举器Enumeration到迭代器Iterator的适配"></a>3、Java中从以前枚举器Enumeration到迭代器Iterator的适配</h3><p>从<code>Enumeration</code>到<code>Iterator</code>适配的结构图:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/07_adapter_06.png" alt="07_adapter_06.png"></p><p>一个实例代码:(下面<code>EnumerationIterator</code>就是一个适配器)</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 对象适配器的举例 java中的枚举到迭代器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumerationIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Enumeration enumeration<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//枚举 : 被适配者</span>    <span class="token keyword">public</span> <span class="token function">EnumerationIterator</span><span class="token punctuation">(</span>Enumeration enumeration<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>enumeration <span class="token operator">=</span> enumeration<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> enumeration<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//实际调用的是 被适配者 的方法</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> enumeration<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这个可以说是适配器的缺点， 有些不能适配，比如两个插孔的插头不能适配为三个插孔的插头</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>对象适配器和类适配器使用了不同的方法实现适配，<strong>对象适配器使用组合，类适配器使用继承</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 适配器模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂模式</title>
      <link href="/2019/06/16/06-chou-xiang-gong-han-mo-shi/"/>
      <url>/2019/06/16/06-chou-xiang-gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><p>当涉及到<strong>产品族</strong>的时候，就需要引入抽象工厂模式了。</p><p>每一个模式都是针对一定问题的解决方案。抽象工厂模式与工厂方法模式的最大区别就在于，<strong>工厂方法模式针对的是一个产品等级结构；而抽象工厂模式则需要面对多个产品等级结构</strong>。</p><p>在学习抽象工厂具体实例之前，应该明白两个重要的概念：产品族和产品等级。</p><p>所谓产品族，是指位于不同产品等级结构中，功能相关联的产品组成的家族。比如AMD的主板、芯片组、CPU组成一个家族，Intel的主板、芯片组、CPU组成一个家族。而这两个家族都来自于三个产品等级：主板、芯片组、CPU。一个等级结构是由相同的结构的产品组成，示意图如下：</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/06_abstract_06.png" alt="06_abstract_06.png"></p><h2 id="二、案例"><a href="#二、案例" class="headerlink" title="二、案例"></a>二、案例</h2><p>一个经典的例子是造一台电脑。我们先不引入抽象工厂模式，看看怎么实现。</p><p>因为电脑是由许多的构件组成的，我们将 CPU 和主板进行抽象，然后 CPU 由 CPUFactory 生产，主板由 MainBoardFactory 生产，然后，我们再将 CPU 和主板搭配起来组合在一起，如下:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/06_abstract_01.png" alt="06_abstract_01.png"></p><p>代码组织结构:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/06_abstract_02.png" alt="06_abstract_02.png"></p><p>这个时候的客户端调用是这样的（测试类）：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 得到 Intel 的 CPU</span>        CPUFactory intelCPUFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntelCPUFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CPU cpu <span class="token operator">=</span> intelCPUFactory<span class="token punctuation">.</span><span class="token function">makeCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 得到 AMD 的主板</span>        MainBoardFactory mainBoardFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AmdMainBoardFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MainBoard mainBoard <span class="token operator">=</span> mainBoardFactory<span class="token punctuation">.</span><span class="token function">makeMB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 组装 CPU 和主板</span>        Computer computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span>cpu<span class="token punctuation">,</span> mainBoard<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>computer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>具体的完整代码可以看<a href="https://github.com/ZXZxin/ZXNotes/tree/master/%E6%9D%82%E9%A1%B9/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/factory" target="_blank" rel="noopener">这里</a></strong></p><p>单独看 CPU 工厂和主板工厂，它们分别是前面我们说的<strong>工厂模式</strong>。</p><p>这种方式也容易扩展，因为要给电脑加硬盘的话，只需要加一个 HardDiskFactory 和相应的实现即可，不需要修改现有的工厂。</p><p>但是，这种方式有一个问题，那就是如果 <strong>Intel 家产的 CPU 和 AMD 产的主板不能兼容使用</strong>，那么这代码就容易出错，因为客户端并不知道它们不兼容，也就会错误地出现随意组合。</p><p>下面就是我们要说的<strong>产品族</strong>的概念，它代表了组成某个产品的一系列附件的集合：</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/06_abstract_03.png" alt="06_abstract_03.png"></p><p>当涉及到这种产品族的问题的时候，就需要抽象工厂模式来支持了。我们不再定义 CPU 工厂、主板工厂、硬盘工厂、显示屏工厂等等，<strong>我们直接定义电脑工厂，每个电脑工厂负责生产所有的设备，这样能保证肯定不存在兼容问题</strong>。</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/06_abstract_04.png" alt="06_abstract_04.png"></p><p>这个时候，对于客户端来说，不再需要单独挑选 CPU厂商、主板厂商、硬盘厂商等，直接选择一家品牌工厂，品牌工厂会负责生产所有的东西，而且能保证肯定是兼容可用的。</p><p>改装的抽象工厂模式代码组织结构如下:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/06_abstract_05.png" alt="06_abstract_05.png"></p><p>主要的代码:</p><p>三个工厂:(一个超类工厂<code>PCFactory</code>，两个大厂工厂<code>AmdFactory</code>、<code>InterFactory</code>)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PCFactory</span> <span class="token punctuation">{</span>    CPU <span class="token function">makeCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MainBoard <span class="token function">makeMB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// HardDisk makeHD();</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AmdFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PCFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> CPU <span class="token function">makeCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AmdCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> MainBoard <span class="token function">makeMB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AmdMainBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntelFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PCFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> CPU <span class="token function">makeCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IntelCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> MainBoard <span class="token function">makeMB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IntelMainBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后的测试类:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第一步就要选定一个“大厂”</span>        PCFactory cf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AmdFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从这个大厂造 CPU</span>        CPU cpu <span class="token operator">=</span> cf<span class="token punctuation">.</span><span class="token function">makeCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从这个大厂造主板</span>        MainBoard board <span class="token operator">=</span> cf<span class="token punctuation">.</span><span class="token function">makeMB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//... 从这个大厂造硬盘。等等</span>        <span class="token comment" spellcheck="true">// 将同一个厂子出来的 CPU、主板、硬盘组装在一起</span>        Computer computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span>cpu<span class="token punctuation">,</span> board<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>当然，抽象工厂的问题也是显而易见的，比如我们要加个显示器，就需要修改所有的工厂，给所有的工厂都加上制造显示器的方法。这有点违反了<strong>对修改关闭，对扩展开放</strong>这个设计原则。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抽象工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂方法模式</title>
      <link href="/2019/06/16/05-gong-han-fang-fa-mo-shi/"/>
      <url>/2019/06/16/05-gong-han-fang-fa-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><p><strong>工厂方法模式是类的创建模式，又叫做虚拟构造子(Virtual Constructor)模式或者多态性工厂（Polymorphic Factory）模式</strong>。工厂方法模式的用意是<strong>定义一个创建产品对象的工厂接口，将实际创建工作推迟到子类中</strong>。</p><p>或者说引入工厂模式的目的就是我们需要多个工厂，但是每个工厂内部又要划分情况，如果只用一个工厂的话，会产生多种复合的情况。</p><p>比如说我们有两个工厂，每个工厂有3种情况，如果用简单工厂模式，要分为 <code>3 * 2 = 6</code>种情况，所以可以用工厂方法模式解决。</p><h2 id="二、结构"><a href="#二、结构" class="headerlink" title="二、结构"></a>二、结构</h2><p>在简单工厂中，创建对象的是另一个类，而在工厂方法中，是由大工厂的子类(或者实现类)来创建对象。</p><p>即上面有一个大工厂，下面是分类的工厂。</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/05_method_03.png" alt="05_method_03.png"></p><h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><blockquote><p>案例，模拟需要生成中国食物A，中国食物B，美国食物A，美国食物B。</p></blockquote><p>代码逻辑结构图:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/05_method_01.png" alt="05_method_01.png"></p><p>基本结构图:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/04_method_02.png" alt="04_method_02.png"></p><p>先给出这些食物(<code>Product</code>):</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AmericanFoodA</span> <span class="token keyword">implements</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AmericanFoodB</span> <span class="token keyword">implements</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChineseFoodA</span> <span class="token keyword">implements</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChineseFoodB</span> <span class="token keyword">implements</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>然后是抽象工厂:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FoodFactory</span> <span class="token punctuation">{</span>    Food <span class="token function">makeFood</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后就是两个子工厂:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChineseFoodFactory</span> <span class="token keyword">implements</span> <span class="token class-name">FoodFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Food <span class="token function">makeFood</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChineseFoodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChineseFoodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AmericanFoodFactory</span> <span class="token keyword">implements</span> <span class="token class-name">FoodFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Food <span class="token function">makeFood</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AmericanFoodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AmericanFoodB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后测试:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 先选择一个具体的工厂</span>        FoodFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChineseFoodFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 由第一步的工厂产生具体的对象，不同的工厂造出不一样的对象</span>        Food food <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">makeFood</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  chineseFood * A</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>工厂方法模式和简单工厂模式在结构上的不同很明显。</p><p><strong>工厂方法模式的核心是一个抽象工厂类，而简单工厂模式把核心放在一个具体类上</strong>。</p><p>工厂方法模式退化后可以变得很像简单工厂模式。设想如果非常确定一个系统只需要一个具体工厂类，那么不妨把抽象工厂类合并到具体工厂类中去。由于只有一个具体工厂类，所以不妨将工厂方法改为静态方法，这时候就得到了简单工厂模式。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂方法模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单工厂模式</title>
      <link href="/2019/06/16/04-jian-dan-gong-han-mo-shi/"/>
      <url>/2019/06/16/04-jian-dan-gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>)</p><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><p><strong>简单工厂模式是类的创建模式，又叫做静态工厂方法（Static Factory Method）模式。简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例</strong>。</p><p>在创建一个对象时不向客户暴露内部细节，并提供一个创建对象的通用接口。</p><h2 id="二、结构"><a href="#二、结构" class="headerlink" title="二、结构"></a>二、结构</h2><p>简单工厂把实例化的操作单独放到一个类中，这个类就是简单工厂类(<strong>Simple Factory</strong>)，让简单工厂类来决定应该用哪个具体子类来实例化 (而不是在客户端中决定)。</p><p>这样做能把客户类和具体子类的实现解耦，客户类不再需要知道有哪些子类以及应当实例化哪个子类。</p><p>客户类往往有多个，如果不使用简单工厂，那么所有的客户类都要知道所有子类的细节。而且一旦子类发生改变，例如增加子类，那么所有的客户类都要进行修改。</p><p>结构:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/04_simple_01.png" alt="04_simple_01.png"></p><h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><blockquote><p>模拟在<code>type == 1</code>的时候创建<code>ConcreteProduct1</code>、在<code>type == 2</code>的时候创建<code>ConcreteProduct2</code>、其他时候创建<code>ConcreteProduct</code>。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteProduct</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteProduct1</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteProduct2</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>如果我们按照下面的方式创建，则我们在客户端包含了这些需要判断条件的实例化代码，则可以将这些实例化代码放到简单工厂中:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 不好的设计</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> type <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        Product product<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// do something with the product</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>于是我们可以增加一个简单工厂类:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 也可以将createProduct写成静态的</span>    <span class="token keyword">public</span> Product <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后我们的测试类可以写成下面的样子:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SimpleFactory simpleFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Product product <span class="token operator">=</span> simpleFactory<span class="token punctuation">.</span><span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// do something with product</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样既让客户端和具体类解耦，而且在客户端也看不到具体的繁杂的实例化代码。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>缺点 : 这个工厂类集中了所有的创建逻辑，当有复杂的多层次等级结构时，所有的业务逻辑都在这个工厂类中实现。什么时候它不能工作了，整个系统都会受到影响。</p><p>我们强调<strong>职责单一</strong>原则，一个类只提供一种功能。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰者模式</title>
      <link href="/2019/06/16/03-zhuang-shi-zhe-mo-shi/"/>
      <url>/2019/06/16/03-zhuang-shi-zhe-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><p>装饰者模式是结构型设计模式。</p><p>装饰模式以<strong>对客户端透明的方式扩展对象的功能</strong>，是继承关系的一个替代方案。</p><p>允许向一个现有的对象添加新的功能。同时又不改变其结构，它是作为现有的类的一个包装。</p><p>主要解决的问题: 一般我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，<strong>子类会很膨胀</strong>。</p><h2 id="二、结构"><a href="#二、结构" class="headerlink" title="二、结构"></a>二、结构</h2><p>结构：</p><ul><li>装饰者（Decorator）和具体组件（ConcreteComponent）都继承自组件（Component）；</li><li>所谓装饰，就是把这个装饰者套在被装饰者之上，从而动态扩展被装饰者的功能；</li><li>装饰者的方法有一部分是自己的，这属于它的功能(<strong>半透明的装饰者模式</strong>)。然后调用被装饰者的方法实现，从而也保留了被装饰者的功能；</li></ul><p><img src="http://psxfdx6gr.bkt.clouddn.com/03_decorator_02.png" alt="03_decorator_02.png"></p><h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><h3 id="1、装饰者模式案例"><a href="#1、装饰者模式案例" class="headerlink" title="1、装饰者模式案例"></a>1、装饰者模式案例</h3><blockquote><p>模拟在餐馆点饮料，我们可以点咖啡，而咖啡有<code>Decaf</code>咖啡和<code>Espresso</code>咖啡，而这两种咖啡都可以加牛奶和巧克力进去。</p></blockquote><p>具体的代码组织结构图:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/03_decorator_01.png" alt="03_decorator_01.png"></p><p>具体代码:</p><p>先看最高的<code>component</code>包下的<code>Drink</code>类:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Component的超类 * 单品和装饰者都要继承自这个类 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Drink</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String description <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//一开始没有描述</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//一开始价格为0</span>    <span class="token comment" spellcheck="true">/**     * 抽象方法     *  1、如果是单品的话就直接是自己的价格     *  2、如果是装饰者的话就还要加上装饰品自己的价格     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// setter getter</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDescription</span><span class="token punctuation">(</span>String description<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//描述的时候顺便把价格描述一下</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面看两个具体的<code>Component</code>:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** ConcreteComponent 1*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Decaf</span> <span class="token keyword">extends</span> <span class="token class-name">Drink</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Decaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">"Decaf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//3块钱</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//super.getPrice()//这个就是父类的价格(自己什么也没加 (没有被装饰))</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 重写getter 后面加上自己的花费</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** ConcreteComponent 2 *  也可以在ConcreteComponent和Drink类有一个过渡的类)  (比如Coffee类) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Espresso</span> <span class="token keyword">extends</span> <span class="token class-name">Drink</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Espresso</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">"Espresso"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//super.getPrice()//这个就是父类的价格(自己什么也没加)</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面看<code>decorator</code>下的三个类:</p><p>第一个是装饰者的超类，继承自<code>Drink</code>类:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token keyword">extends</span> <span class="token class-name">Drink</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 这个引用很重要，可以是单品，也可以是被包装过的类型，所以使用的是超类的对象     * 这个就是要被包装的单品(被装饰的对象)     */</span>    <span class="token keyword">private</span> Drink drink<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里要拿到父类的引用，因为要控制另一个分支(具体的组件)</span>    <span class="token keyword">public</span> <span class="token function">Decorator</span><span class="token punctuation">(</span>Drink drink<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>drink <span class="token operator">=</span> drink<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 如果drink是已经被装包过的，那么就会产生递归调用　　最终到单品     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> drink<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自己的价格和被包装单品的价格</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">+</span> <span class="token string">" &amp;&amp; "</span> <span class="token operator">+</span> drink<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后是两个装饰者:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 这个是具体的装饰者() --> 继承自中间的装饰着Decorator */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chocolate</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Chocolate</span><span class="token punctuation">(</span>Drink drink<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果父类搞了一个　带参数的构造函数，子类必须显示的使用super调用</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>drink<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">"Chocolate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Milk</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Milk</span><span class="token punctuation">(</span>Drink drink<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>drink<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用父类的构造函数</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">"Milk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//只点一个单品 (Decaf 咖啡)</span>        Drink order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Decaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order description : "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order price : "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------加了调料的----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Milk</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 加了牛奶</span>        order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chocolate</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chocolate</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 加了两个巧克力</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order description : "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"order price : "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>程序输出:</p><pre class=" language-java"><code class="language-java">order description <span class="token operator">:</span> Decaf<span class="token operator">-</span><span class="token number">3.0</span>order price <span class="token operator">:</span> <span class="token number">3.0</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>加了调料的<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>order description <span class="token operator">:</span> Chocolate<span class="token operator">-</span><span class="token number">1.0</span> <span class="token operator">&amp;&amp;</span> Chocolate<span class="token operator">-</span><span class="token number">1.0</span> <span class="token operator">&amp;&amp;</span> Milk<span class="token operator">-</span><span class="token number">3.0</span> <span class="token operator">&amp;&amp;</span> Decaf<span class="token operator">-</span><span class="token number">3.0</span>order price <span class="token operator">:</span> <span class="token number">8.0</span></code></pre><h3 id="2、JavaIO中使用装饰者模式"><a href="#2、JavaIO中使用装饰者模式" class="headerlink" title="2、JavaIO中使用装饰者模式"></a>2、JavaIO中使用装饰者模式</h3><p>由于Java I/O库需要很多性能的各种组合，如果这些性能都是用继承的方法实现的，那么每一种组合都需要一个类，这样就会造成大量性能重复的类出现，所以Java IO使用的是装饰者设计模式。</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/03_decorator_03.png" alt></p><p>所以我们可以定义自己的装饰者。</p><blockquote><p> 这里我们定义一个流，这个流将读入的小写字母转换成大写字母。</p></blockquote><p><code>UpperCaseInputStream</code>代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 自己定义的输入流　　 * 扩展FilterInputStream(这个类就是我们的Decorator) 中间装饰者　　 * 所以我们只要继承这个就可以扩展自己的输入流装饰者　 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpperCaseInputStream</span> <span class="token keyword">extends</span> <span class="token class-name">FilterInputStream</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token function">UpperCaseInputStream</span><span class="token punctuation">(</span>InputStream in<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//这个InputStream就是我们的Drink 类(超类)</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 实现两个read()方法，将大写转化成小写的读入</span>    <span class="token comment" spellcheck="true">//重写　相当于cost和description</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//读取一个字节</span>        <span class="token keyword">return</span> index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> index <span class="token operator">:</span> Character<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//小写转换成大写</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//字节数组</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> off<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>Character<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> index<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试一下使用这个类:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpperCaseInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/home/zxzxin/Java_Maven/DesignPatterns/src/main/java/decorator/java/in.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将这个in.txt文件读入的内容转换成大写</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果演示:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/03_decorator_04.png" alt="03_decorator_04.png"></p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>优缺点:</p><ul><li><strong>优点</strong> : 装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。</li><li><strong>缺点</strong> : 多层装饰比较复杂。</li></ul><p>实际应用: 　<strong>大多数情况下，装饰模式的实现都要比上面给出的示意性例子要简单。</strong></p><ul><li>如果只有一个ConcreteComponent类，那么可以考虑去掉抽象的Component类（接口），把Decorator作为一个ConcreteComponent子类；</li><li>　如果只有一个ConcreteDecorator类，那么就没有必要建立一个单独的Decorator类，而可以把Decorator和ConcreteDecorator的责任合并成一个类。</li></ul><p>更加详细的解释具体可以看<a href="http://www.cnblogs.com/java-my-life/archive/2012/04/20/2455726.html" target="_blank" rel="noopener"><strong>这篇博客</strong></a>。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装饰者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/2019/06/16/02-guan-cha-zhe-mo-shi/"/>
      <url>/2019/06/16/02-guan-cha-zhe-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><p>观察者模式是行为型设计模式。</p><ul><li><strong>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新</strong>；</li><li>被依赖的对象为<code>Subject</code>(被观察者)，依赖的对象为<code>Observer</code>，<code>Subject</code>通知<code>Observer</code>变化；</li><li><code>Subject</code> : 登记注册<code>register/attach</code>、移除<code>remove</code>、通知<code>notify</code>；</li><li><code>Observer</code> : 接收变化<code>update</code>； </li><li>可以把观察者模式想象成订报纸一样，<strong>出版者+订阅者 = 观察者模式</strong>；</li></ul><h2 id="二、结构"><a href="#二、结构" class="headerlink" title="二、结构"></a>二、结构</h2><p>观察者模式所涉及的角色有：</p><p>　　● <strong>抽象主题(Subject)角色：</strong>抽象主题角色把所有对<strong>观察者对象</strong>的引用保存在一个聚集（比如<code>List</code>对象）里。抽象主题提供一个接口，可以增加和删除观察者对象，抽象主题角色又叫做抽象被观察者(Observable)角色；</p><p>　　● <strong>具体主题(ConcreteSubject)角色</strong>：将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色又叫做具体被观察者(Concrete Observable)角色；</p><p>　　● <strong>抽象观察者(Observer)角色</strong>：为所有的具体观察者定义一个接口，在得到主题的通知时更新自己，这个接口叫做更新接口。</p><p>　　● <strong>具体观察者(ConcreteObserver)角色</strong>：存储与主题的状态自恰的状态。具体观察者角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态相协调。如果需要，具体观察者角色可以保持一个指向具体主题对象(Concrete Subject)的引用；</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/02_observer_02.png" alt="02_observer_02.png"></p><h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><p>案例：</p><blockquote><p>实现的功能是气象站的管理，给你一个<code>WeatherData</code>类(<strong>被观察者</strong>)，提供了获取温度，湿度，和气压的函数，要你设计类并添加一些公告板(<strong>观察者</strong>)，可以显示相关的信息；</p></blockquote><p>基本结构图:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/02_observer_01.png" alt="02_observer_01.png"></p><p><strong>下面使用自定义的观察者和Java内置观察者实现</strong>。</p><h3 id="1、自定义的观察者实现"><a href="#1、自定义的观察者实现" class="headerlink" title="1、自定义的观察者实现"></a>1、自定义的观察者实现</h3><p>基本代码结构组织图:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/02_observer_03.png" alt="02_observer_03.png"></p><p>先看被观察者包<code>subjects</code>里面的两个:</p><p><code>Subject</code>接口:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**被观察者接口*/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">registerObservers</span><span class="token punctuation">(</span>Observer o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注册</span>    <span class="token keyword">void</span> <span class="token function">removeObservers</span><span class="token punctuation">(</span>Observer o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//移除</span>    <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//通知</span><span class="token punctuation">}</span></code></pre><p><code>WeatherData</code>类 (被观察者的实现):</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 被观察者的实现 * 里面有: *   1、观察者接口的集合数据结构 * 　2、实现添加观察者方法(registerObservers) *   3、移除观察者方法(removeObservers) *   4、通知所有观察者的方法(notifyObservers) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherData</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> humidity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> pressure<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 可以提供getter()方法</span>    <span class="token keyword">private</span> ArrayList<span class="token operator">&lt;</span>Observer<span class="token operator">></span>observers<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">WeatherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">double</span> temperature<span class="token punctuation">,</span> <span class="token keyword">double</span> humidity<span class="token punctuation">,</span> <span class="token keyword">double</span> pressure<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token function">dataChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新完信息就马上通知观察者</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//数据改变之后就通知观察者(从气象站得到更新的观测值之后，通知观察者)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dataChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerObservers</span><span class="token punctuation">(</span>Observer o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeObservers</span><span class="token punctuation">(</span>Observer o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> observers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> observers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Observer observer <span class="token operator">=</span> observers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>temperature<span class="token punctuation">,</span> humidity<span class="token punctuation">,</span> pressure<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> 然后再看<code>observers</code>包的接口和实现类:</p><p><code>Observer</code>接口:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 观察者 接口*/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">double</span> temperature<span class="token punctuation">,</span> <span class="token keyword">double</span> humidity<span class="token punctuation">,</span> <span class="token keyword">double</span> pressure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>两个实现类:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 观察者1 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurrentConditionDisplay</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> humidity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> pressure<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">double</span> temperature<span class="token punctuation">,</span> <span class="token keyword">double</span> humidity<span class="token punctuation">,</span> <span class="token keyword">double</span> pressure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CurrentDisplay : "</span> <span class="token operator">+</span>                <span class="token string">"["</span> <span class="token operator">+</span> temperature  <span class="token operator">+</span>                <span class="token string">", "</span> <span class="token operator">+</span> humidity  <span class="token operator">+</span>                <span class="token string">", "</span> <span class="token operator">+</span> pressure <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 观察者2  明天的天气展示 : Math.random * 当前设置值, 主要是为了展示和上一个观察者的不同*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TomorrowConditionDisplay</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> humidity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> pressure<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">double</span> temperature<span class="token punctuation">,</span> <span class="token keyword">double</span> humidity<span class="token punctuation">,</span> <span class="token keyword">double</span> pressure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ( (int)(10 * Math.random())/2 + 1)  生成 [1,5]的随机数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TomorrowDisplay : "</span> <span class="token operator">+</span>                <span class="token string">"["</span> <span class="token operator">+</span> temperature <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">", "</span> <span class="token operator">+</span> humidity <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">", "</span> <span class="token operator">+</span> pressure <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后测试:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        WeatherData weatherData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeatherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建一个被观察者(Subject的实现类)</span>        <span class="token comment" spellcheck="true">// 创建两个观察者 (Observer的实现类)</span>        CurrentConditionDisplay current <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CurrentConditionDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TomorrowConditionDisplay tomorrow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TomorrowConditionDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在被观察者的List中注册两个观察者</span>        weatherData<span class="token punctuation">.</span><span class="token function">registerObservers</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">registerObservers</span><span class="token punctuation">(</span>tomorrow<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置完(天气更新)就会自动通知两个观察者</span>        weatherData<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------移除Tomorrow公告板----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">removeObservers</span><span class="token punctuation">(</span>tomorrow<span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>程序输出：</p><pre class=" language-java"><code class="language-java">CurrentDisplay <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">100.0</span><span class="token punctuation">,</span> <span class="token number">50.0</span><span class="token punctuation">]</span>TomorrowDisplay <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">100.0</span><span class="token punctuation">,</span> <span class="token number">150.0</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>移除Tomorrow公告板<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>CurrentDisplay <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">200.0</span><span class="token punctuation">,</span> <span class="token number">25.0</span><span class="token punctuation">]</span></code></pre><h3 id="2、Java内置观察者实现"><a href="#2、Java内置观察者实现" class="headerlink" title="2、Java内置观察者实现"></a>2、Java内置观察者实现</h3><p>被观察者继承自<code>Observable</code>类，观察者实现<code>Observer</code>接口:</p><ul><li><code>Observable</code>类中有<code>addObserver()</code>方法，类似于我们的<code>registerObserver()</code>；</li><li><code>Observable</code>类中有<code>deleteObserver()</code>方法，类似与我们的<code>removeObserver()</code>；</li><li>此外<code>Observable</code>类中还有两个<code>notifyObservers()</code>方法。为什么两个呢?<ul><li>Java内置的被观察者更新的方法有两种，一种是推，一种是拉；</li><li><code>public void notifyObservers(Object arg)</code>对应的是”推”；意思就是推送给观察者；</li><li><code>public void notifyObservers()</code>对应的是”拉”；意思就是需要观察者自己拉取数据；</li></ul></li><li>内置的和自己定义的在更新的时候有一个很大的不同就是: Java内置观察者在更新的时候，需要先调用一个<code>setChanged()</code>方法，标记状态已经被改变的事实。这个可以更加灵活的使用观察者模式(在调用<code>setChanged()</code>之前添加一些条件)；</li></ul><p>基本代码结构组织图:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/02_observer_04.png" alt="02_observer_04.png"></p><p>代码如下:</p><p>首先看被观察者: </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这里需要继承Java的Observable类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherData</span> <span class="token keyword">extends</span> <span class="token class-name">Observable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> humidity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> pressure<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> temperature<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getHumidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> humidity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPressure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pressure<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">double</span> temperature<span class="token punctuation">,</span> <span class="token keyword">double</span> humidity<span class="token punctuation">,</span> <span class="token keyword">double</span> pressure<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token function">dataChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新完信息就马上通知观察者</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//数据改变之后就通知观察者(从气象站得到更新的观测值之后，通知观察者)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dataChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这个很重要，一定要设置这个，java底层有一个boolean值 changed = true; , 可以不那么灵活 (可以设置一些条件然后调用setChanged()方法)</span>        <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span>temperature<span class="token punctuation">,</span> humidity<span class="token punctuation">,</span> pressure<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这个是 "推" 数据</span><span class="token comment" spellcheck="true">//        notifyObservers();  // 靠观察者自己 "拉" 数据</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 这个类的作用就是为了 适应Observable里面的这个方法(推数据) : public void notifyObservers(Object arg)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> humidity<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> pressure<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Data</span><span class="token punctuation">(</span><span class="token keyword">double</span> temperature<span class="token punctuation">,</span> <span class="token keyword">double</span> humidity<span class="token punctuation">,</span> <span class="token keyword">double</span> pressure<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> temperature<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getHumidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> humidity<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPressure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> pressure<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后是两个观察者:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurrentConditionDisplay</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> humidity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> pressure<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这里表示的是直接接受　被观察者的数据("推"　过来的数据　)　　-->  也可以自己获取("拉")数据</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Observable o<span class="token punctuation">,</span> Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//注意这里还有被观察者的引用</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>WeatherData<span class="token punctuation">.</span>Data<span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//强制类型转换一下</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>WeatherData<span class="token punctuation">.</span>Data<span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHumidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>WeatherData<span class="token punctuation">.</span>Data<span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPressure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CurrentDisplay : "</span> <span class="token operator">+</span>                <span class="token string">"["</span> <span class="token operator">+</span> temperature  <span class="token operator">+</span>                <span class="token string">", "</span> <span class="token operator">+</span> humidity  <span class="token operator">+</span>                <span class="token string">", "</span> <span class="token operator">+</span> pressure <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TomorrowConditionDisplay</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> humidity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> pressure<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这个就是</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Observable observable<span class="token punctuation">,</span> Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 两种设值方式  "推" | "拉"</span>        <span class="token comment" spellcheck="true">// "推"　过来的</span><span class="token comment" spellcheck="true">//        this.temperature = ((WeatherData.Data)data).getTemperature();</span><span class="token comment" spellcheck="true">//        this.humidity = ((WeatherData.Data)data).getHumidity();</span><span class="token comment" spellcheck="true">//        this.pressure = ((WeatherData.Data)data).getPressure();</span>        <span class="token comment" spellcheck="true">// 自己 "拉" 过来的</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>WeatherData<span class="token punctuation">)</span>observable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>WeatherData<span class="token punctuation">)</span>observable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHumidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>WeatherData<span class="token punctuation">)</span>observable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPressure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ( (int)(10 * Math.random())/2 + 1)  生成 [1,5]的随机数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TomorrowDisplay : "</span> <span class="token operator">+</span>                <span class="token string">"["</span> <span class="token operator">+</span> temperature <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">", "</span> <span class="token operator">+</span> humidity <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">", "</span> <span class="token operator">+</span> pressure <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        WeatherData weatherData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeatherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建被观察者</span>        <span class="token comment" spellcheck="true">// 创建两个观察者</span>        CurrentConditionDisplay current <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CurrentConditionDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TomorrowConditionDisplay tomorrow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TomorrowConditionDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>tomorrow<span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------移除Tomorrow公告板----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">deleteObserver</span><span class="token punctuation">(</span>tomorrow<span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">444</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出:</p><pre class=" language-java"><code class="language-java">TomorrowDisplay <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">33.0</span><span class="token punctuation">,</span> <span class="token number">666.0</span><span class="token punctuation">,</span> <span class="token number">33.0</span><span class="token punctuation">]</span>CurrentDisplay <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">11.0</span><span class="token punctuation">,</span> <span class="token number">222.0</span><span class="token punctuation">,</span> <span class="token number">33.0</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>移除Tomorrow公告板<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>CurrentDisplay <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">22.0</span><span class="token punctuation">,</span> <span class="token number">444.0</span><span class="token punctuation">,</span> <span class="token number">66.0</span><span class="token punctuation">]</span></code></pre><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p><strong>使用场景</strong></p><ul><li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。</li><li>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。</li><li>一个对象必须通知其他对象，而并不知道这些对象是谁。</li><li>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观察者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/2019/06/16/01-ce-lue-mo-shi/"/>
      <url>/2019/06/16/01-ce-lue-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><p>策略模式是<strong>行为型</strong>设计模式。</p><p>其用意是针对一组算法，<strong>将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换</strong>。</p><p>策略模式使得算法可以在不影响到客户端的情况下发生变化。</p><h2 id="二、结构"><a href="#二、结构" class="headerlink" title="二、结构"></a>二、结构</h2><p>下面是基本结构:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/01_stratgy_01.png" alt></p><p>三类角色:</p><ul><li><strong>环境(Context)角色</strong>：持有一个<code>Strategy</code>的引用。</li><li><strong>抽象策略(Strategy)角色</strong>：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。</li><li><strong>具体策略(ConcreteStrategy)角色</strong>：包装了相关的算法或行为。</li></ul><h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><p>案例实现:</p><blockquote><p>定义一族算法，可以实现对两个数的操作，例如<code>+、-、*、/</code>等。</p></blockquote><p>实现代码整体框架图:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/01_stratgy_02.png" alt="pic"></p><p>具体代码实现:</p><p><code>Context</code>类:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Context 是一个使用了某种策略的类。 实现了 Strategy 接口的实体策略类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Strategy strategy<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Context</span><span class="token punctuation">(</span>Strategy strategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> strategy<span class="token punctuation">.</span><span class="token function">doOperation</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>Strategy</code>接口:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**策略的公共接口*/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">doOperation</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>三种对应的算法实现:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 算法１: 实现加法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperationAdd</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">doOperation</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 算法2：实现减法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperationSubstract</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">doOperation</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 算法3: 实现乘法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperationMultiply</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">doOperation</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Context context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OperationAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10 + 5 = "</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OperationSubstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10 - 5 = "</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OperationMultiply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10 * 5 = "</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>程序输出:</p><pre class=" language-java"><code class="language-java"><span class="token number">10</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token number">10</span> <span class="token operator">-</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">50</span></code></pre><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ul><li>策略模式的重心不是如何实现算法，而是如何组织、调用这些算法；</li><li>策略模式一个很大的特点就是各个策略算法的平等性。对于一系列具体的策略算法，大家的地位是完全一样的，正因为这个平等性，才能实现算法之间可以相互替换；</li><li>使用策略模式可以避免使用多重条件(if-else)语句；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 策略模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaStream-汇总统计</title>
      <link href="/2019/06/12/javastream-hui-zong-tong-ji/"/>
      <url>/2019/06/12/javastream-hui-zong-tong-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="汇总统计"><a href="#汇总统计" class="headerlink" title="汇总统计"></a>汇总统计</h2><h5 id="问题：用户希望获取数值流中元素的数量，总和、最小值、最大值已经平均值。"><a href="#问题：用户希望获取数值流中元素的数量，总和、最小值、最大值已经平均值。" class="headerlink" title="问题：用户希望获取数值流中元素的数量，总和、最小值、最大值已经平均值。"></a>问题：用户希望获取数值流中元素的数量，总和、最小值、最大值已经平均值。</h5><h5 id="方案：使用IntStream、DoubleStream、LongStream-接口定义的SummaryStatistics-方法"><a href="#方案：使用IntStream、DoubleStream、LongStream-接口定义的SummaryStatistics-方法" class="headerlink" title="方案：使用IntStream、DoubleStream、LongStream 接口定义的SummaryStatistics()方法"></a>方案：使用IntStream、DoubleStream、LongStream 接口定义的SummaryStatistics()方法</h5><pre class=" language-java"><code class="language-java">DoubleSummaryStatistics doubleSummarystatistics <span class="token operator">=</span> DoubleStream<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>Math<span class="token operator">:</span><span class="token operator">:</span>random<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>1_000_000<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">summaryStatistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>doubleSummarystatistics<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count: "</span><span class="token operator">+</span>doubleSummarystatistics<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"min: "</span><span class="token operator">+</span>doubleSummarystatistics<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"max: "</span><span class="token operator">+</span>doubleSummarystatistics<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum: "</span><span class="token operator">+</span>doubleSummarystatistics<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ave: "</span><span class="token operator">+</span>doubleSummarystatistics<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h5><pre class=" language-java"><code class="language-java">DoubleSummaryStatistics<span class="token punctuation">{</span>count<span class="token operator">=</span><span class="token number">1000000</span><span class="token punctuation">,</span> sum<span class="token operator">=</span><span class="token number">500292.313874</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0.000000</span><span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token number">0.500292</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">1.000000</span><span class="token punctuation">}</span>count<span class="token operator">:</span> <span class="token number">1000000</span>min<span class="token operator">:</span> <span class="token number">2.2396595011908715E-7</span>max<span class="token operator">:</span> <span class="token number">0.9999995590575925</span>sum<span class="token operator">:</span> <span class="token number">500292.3138742163</span>ave<span class="token operator">:</span> <span class="token number">0.5002923138742162</span></code></pre><h3 id="一、采用collect方法的三参数形式"><a href="#一、采用collect方法的三参数形式" class="headerlink" title="一、采用collect方法的三参数形式"></a>一、采用collect方法的三参数形式</h3><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Getter</span>    <span class="token annotation punctuation">@Setter</span>    <span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Team</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span>  <span class="token keyword">final</span> NumberFormat nf <span class="token operator">=</span> NumberFormat<span class="token punctuation">.</span><span class="token function">getCurrencyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>        <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Team {"</span> <span class="token operator">+</span>                    <span class="token string">"id = "</span> <span class="token operator">+</span> id <span class="token operator">+</span>                    <span class="token string">", name = "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"\'"</span> <span class="token operator">+</span>                    <span class="token string">", salary = "</span> <span class="token operator">+</span>nf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'}'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        Team team <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Team</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"kang1"</span><span class="token punctuation">,</span> <span class="token number">245269535.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Team team1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Team</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"kang2"</span><span class="token punctuation">,</span> <span class="token number">202135939.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Team team2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Team</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"kang3"</span><span class="token punctuation">,</span> <span class="token number">202095552.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Team team3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Team</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token string">"kang4"</span><span class="token punctuation">,</span> <span class="token number">73754027.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Team team4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Team</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token string">"kang5"</span><span class="token punctuation">,</span> <span class="token number">73102766.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Team team5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Team</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token string">"kang6"</span><span class="token punctuation">,</span> <span class="token number">62094433.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>doubleSummarystatistics <span class="token operator">=</span>        Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>team<span class="token punctuation">,</span>team1<span class="token punctuation">,</span>team2<span class="token punctuation">,</span>team3<span class="token punctuation">,</span>team4<span class="token punctuation">,</span>team5<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToDouble</span><span class="token punctuation">(</span>Team<span class="token operator">:</span><span class="token operator">:</span>getSalary<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>DoubleSummaryStatistics<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">,</span> DoubleSummaryStatistics<span class="token operator">:</span><span class="token operator">:</span>accept<span class="token punctuation">,</span> DoubleSummaryStatistics<span class="token operator">:</span><span class="token operator">:</span>combine<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>doubleSummarystatistics<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DoubleSummaryStatistics的实例 Team count: = ￥ "</span><span class="token operator">+</span>doubleSummarystatistics<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DoubleSummaryStatistics的实例 Team min: = ￥"</span><span class="token operator">+</span>doubleSummarystatistics<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DoubleSummaryStatistics的实例 Team max: = ￥"</span><span class="token operator">+</span>doubleSummarystatistics<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DoubleSummaryStatistics的实例 Team sum: = ￥"</span><span class="token operator">+</span>doubleSummarystatistics<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DoubleSummaryStatistics的实例 Team ave: = ￥"</span><span class="token operator">+</span>doubleSummarystatistics<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="输出结果：-1"><a href="#输出结果：-1" class="headerlink" title="输出结果："></a>输出结果：</h5><pre class=" language-java"><code class="language-java">DoubleSummaryStatistics<span class="token punctuation">{</span>count<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> sum<span class="token operator">=</span><span class="token number">858452252.000000</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">62094433.000000</span><span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token number">143075375.333333</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">245269535.000000</span><span class="token punctuation">}</span>collect方法的三参数形式 DoubleSummaryStatistics的实例 Team count<span class="token operator">:</span> <span class="token operator">=</span> ￥ <span class="token number">6</span>collect方法的三参数形式 DoubleSummaryStatistics的实例 Team min<span class="token operator">:</span> <span class="token operator">=</span> ￥<span class="token number">6.2094433E7</span>collect方法的三参数形式 DoubleSummaryStatistics的实例 Team max<span class="token operator">:</span> <span class="token operator">=</span> ￥<span class="token number">2.45269535E8</span>collect方法的三参数形式 DoubleSummaryStatistics的实例 Team sum<span class="token operator">:</span> <span class="token operator">=</span> ￥<span class="token number">8.58452252E8</span>collect方法的三参数形式 DoubleSummaryStatistics的实例 Team ave<span class="token operator">:</span> <span class="token operator">=</span> ￥<span class="token number">1.4307537533333334E8</span></code></pre><h5 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h5><p>本例中，collect方法通过构造函数引用来提供DoubleSummaryStatistics的实例，通过accept<br>// 方法将另一个值添加到现有的DoubleSummaryStatistics对象，以及通过combine方法将两个单独的DoubleSummaryStatistics对象合二为一。</p><h3 id="二、采用下游收集器"><a href="#二、采用下游收集器" class="headerlink" title="二、采用下游收集器"></a>二、采用下游收集器</h3><pre class=" language-java"><code class="language-java">doubleSummarystatistics <span class="token operator">=</span>        Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>team<span class="token punctuation">,</span>team1<span class="token punctuation">,</span>team2<span class="token punctuation">,</span>team3<span class="token punctuation">,</span>team4<span class="token punctuation">,</span>team5<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">summarizingDouble</span><span class="token punctuation">(</span>Team<span class="token operator">:</span><span class="token operator">:</span>getSalary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>doubleSummarystatistics<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下游收集器 Collectors.summarizingDouble Team count: = ￥ "</span><span class="token operator">+</span>doubleSummarystatistics<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下游收集器 Collectors.summarizingDouble Team min: = ￥"</span><span class="token operator">+</span>doubleSummarystatistics<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下游收集器 Collectors.summarizingDouble Team max: = ￥"</span><span class="token operator">+</span>doubleSummarystatistics<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下游收集器 Collectors.summarizingDouble Team sum: = ￥"</span><span class="token operator">+</span>doubleSummarystatistics<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下游收集器 Collectors.summarizingDouble Team ave: = ￥"</span><span class="token operator">+</span>doubleSummarystatistics<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="输出结果：-2"><a href="#输出结果：-2" class="headerlink" title="输出结果："></a>输出结果：</h5><pre class=" language-java"><code class="language-java">DoubleSummaryStatistics<span class="token punctuation">{</span>count<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> sum<span class="token operator">=</span><span class="token number">858452252.000000</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">62094433.000000</span><span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token number">143075375.333333</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">245269535.000000</span><span class="token punctuation">}</span>游收集器 Collectors<span class="token punctuation">.</span>summarizingDouble Team count<span class="token operator">:</span> <span class="token operator">=</span> ￥ <span class="token number">6</span>游收集器 Collectors<span class="token punctuation">.</span>summarizingDouble Team min<span class="token operator">:</span> <span class="token operator">=</span> ￥<span class="token number">6.2094433E7</span>游收集器 Collectors<span class="token punctuation">.</span>summarizingDouble Team max<span class="token operator">:</span> <span class="token operator">=</span> ￥<span class="token number">2.45269535E8</span>游收集器 Collectors<span class="token punctuation">.</span>summarizingDouble Team sum<span class="token operator">:</span> <span class="token operator">=</span> ￥<span class="token number">8.58452252E8</span>游收集器 Collectors<span class="token punctuation">.</span>summarizingDouble Team ave<span class="token operator">:</span> <span class="token operator">=</span> ￥<span class="token number">1.4307537533333334E8</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaStream-获取元素数量</title>
      <link href="/2019/06/12/javastream-huo-qu-yuan-su-shu-liang/"/>
      <url>/2019/06/12/javastream-huo-qu-yuan-su-shu-liang/</url>
      
        <content type="html"><![CDATA[<h2 id="获取元素数量"><a href="#获取元素数量" class="headerlink" title="获取元素数量"></a>获取元素数量</h2><h3 id="一、使用java-util-stream-Stream-接口定义的-count-方法"><a href="#一、使用java-util-stream-Stream-接口定义的-count-方法" class="headerlink" title="一、使用java.util.stream.Stream 接口定义的 count()方法"></a>一、使用java.util.stream.Stream 接口定义的 count()方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">long</span> count <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"There are %d elements in the stream %n"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h5><pre><code>There are 9 elements in the stream </code></pre><h3 id="二、使用-Lambda-表达式-mapToLong-求和-sum-方法"><a href="#二、使用-Lambda-表达式-mapToLong-求和-sum-方法" class="headerlink" title="二、使用 Lambda 表达式 mapToLong 求和 sum()方法"></a>二、使用 Lambda 表达式 mapToLong 求和 sum()方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">long</span> countMapToLong <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToLong</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> 1l<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"There are %d elements in the mapToLong %n"</span><span class="token punctuation">,</span>countMapToLong<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="输出结果：-1"><a href="#输出结果：-1" class="headerlink" title="输出结果："></a>输出结果：</h5><pre><code>There are 9 elements in the mapToLong</code></pre><h5 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h5><p>流的每个元素都被映射1（long）然后，mapToLong方法生成LongStream,它定义了sum方法,换言之，先将所有元素映射为1，再将它们相加，简单明了</p><h3 id="三、使用java-util-stream-Collectors-类定义的-counting-方法"><a href="#三、使用java-util-stream-Collectors-类定义的-counting-方法" class="headerlink" title="三、使用java.util.stream.Collectors 类定义的 counting()方法"></a>三、使用java.util.stream.Collectors 类定义的 counting()方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">long</span> countCollect <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"There are %d elements in the Collectors.counting %n"</span><span class="token punctuation">,</span>countCollect<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="输出结果：-2"><a href="#输出结果：-2" class="headerlink" title="输出结果："></a>输出结果：</h5><pre><code>There are 9 elements in the Collectors.counting </code></pre><h5 id="源码分析：-1"><a href="#源码分析：-1" class="headerlink" title="源码分析："></a>源码分析：</h5><p>“下游收集器” （downstream collector）。</p>]]></content>
      
      
      <categories>
          
          <category> Java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda表达式总结</title>
      <link href="/2019/06/11/lambda-biao-da-shi-zong-jie/"/>
      <url>/2019/06/11/lambda-biao-da-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>﻿# Lambda表达式总结</p><hr><h2 id="一、使用范例以及例子"><a href="#一、使用范例以及例子" class="headerlink" title="一、使用范例以及例子"></a>一、使用范例以及例子</h2><p>使用匿名内部类:</p><pre class=" language-java"><code class="language-java">Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span>com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Integer o1<span class="token punctuation">,</span> Integer o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//降序排列</span>        <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o2<span class="token punctuation">,</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>使用<code>Lambda</code>表达式: </p><pre class=" language-java"><code class="language-java"> Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> com <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>下面给出一个例子来引入<code>Lambda</code>表达式。</strong></p><p>给出一个<code>Employee</code>类，有<code>name、age、salary</code>三个属性：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">double</span> salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> salary<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", salary="</span> <span class="token operator">+</span> salary<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后我们需要通过限制查询数据: </p><ul><li>比如查询年龄<code>&gt;25</code>岁的所有员工的信息；</li><li>再如查询工资<code>&gt;4000</code>的员工信息；</li></ul><p>首先给出一个<code>List</code>集合类模拟数据库表: </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将数组转换成集合的</span>List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> employees <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">3333.33</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">4444.44</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">5555.55</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"赵六"</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">6666.66</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"田七"</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">7777.77</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1、原始方法"><a href="#1、原始方法" class="headerlink" title="1、原始方法"></a>1、原始方法</h3><p>然后我们写分别查询出<font color="red">年龄大于<code>25</code>岁的员工信息和工资大于<code>4000</code></font>的员工信息，发现<code>findEmployeesByAge</code>和<code>findEmployeesBySalary</code>两个方法代码非常的相似，<font color="red">只有查询条件不同，所以这个方法是不太可取的。</font></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//年龄</span>    List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> list <span class="token operator">=</span> <span class="token function">findEmployeesByAge</span><span class="token punctuation">(</span>employees<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Employee emp <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//工资</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token function">findEmployeesBySalary</span><span class="token punctuation">(</span>employees<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Employee emp <span class="token operator">:</span> list2<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//原始方法 : 查询出年龄大于25岁的(这个是最原始的方法)</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token function">findEmployeesByAge</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Employee<span class="token operator">></span>list<span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Employee<span class="token operator">></span>emps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Employee emp <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>emp<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> emps<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//原始方法 : 查询出工资大于4000的(这个是最原始的方法)</span><span class="token comment" spellcheck="true">//和上面的方法唯一的差别只有年龄和工资的改动，代码冗余</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token function">findEmployeesBySalary</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Employee<span class="token operator">></span>list<span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Employee<span class="token operator">></span>emps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Employee emp <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>emp<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> emps<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2、优化方式一-使用策略模式来优化"><a href="#2、优化方式一-使用策略模式来优化" class="headerlink" title="2、优化方式一-使用策略模式来优化"></a>2、优化方式一-使用策略模式来优化</h3><p>策略模式需要行为算法族，于是我们创建查询行为的接口<code>MyPredicate&lt;T&gt;</code>: </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyPredicate</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>并创建相关的实现类代表不同的算法行为: (分别是年龄<code>&gt; 25</code>和工资<code>&gt; 4000</code>的 ): </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterEmployeeByAge</span> <span class="token keyword">implements</span> <span class="token class-name">MyPredicate</span><span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>  employee<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">25</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterEmployeeBySalary</span> <span class="token keyword">implements</span> <span class="token class-name">MyPredicate</span><span class="token operator">&lt;</span>Employee<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> employee<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">>=</span> <span class="token number">4000</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><font color="red">这时我们可以只需要创建通用的方法: 具体的调用只需要传入具体的实现类(接口作为参数)</font></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token function">filterEmployees</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Employee<span class="token operator">></span>list<span class="token punctuation">,</span>MyPredicate<span class="token operator">&lt;</span>Employee<span class="token operator">></span>mp<span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Employee<span class="token operator">></span>emps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Employee emp <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//调用相应的过滤器</span>            emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> emps<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><font color="red">测试的时候就传入两个不同的类，来指定查询的行为</font></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//优化方式一 :  使用策略设计模式进行优化  下面的方法只要写一个</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> list <span class="token operator">=</span> <span class="token function">filterEmployees</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>employees<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FilterEmployeeByAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Employee emp <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token function">filterEmployees</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>employees<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FilterEmployeeBySalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Employee emp <span class="token operator">:</span> list2<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3、优化方式二-使用匿名内部类优化"><a href="#3、优化方式二-使用匿名内部类优化" class="headerlink" title="3、优化方式二-使用匿名内部类优化"></a>3、优化方式二-使用匿名内部类优化</h3><p><font color="red">这样的好处在于不需要创建接口的具体的实现类，(但是还是需要<code>MyPredicate</code>接口和<code>filterEmployees()</code>方法): </font></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//优化方式二 ： 使用匿名内部类  这样的好处是不要创建一个额外的 策略类</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> list <span class="token operator">=</span> <span class="token function">filterEmployees</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>employees<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyPredicate</span><span class="token operator">&lt;</span>Employee<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> employee<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">4000</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Employee emp<span class="token operator">:</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4、优化方式三-使用Lambda表达式"><a href="#4、优化方式三-使用Lambda表达式" class="headerlink" title="4、优化方式三-使用Lambda表达式"></a>4、<font color="green">优化方式三-使用Lambda表达式</font></h3><p><font color="red">省去匿名内部类的没用的代码，增强可读性:(注意还是需要那个<code>filterEmployees()</code>方法和<code>MyPredicate</code>接口)</font></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> list <span class="token operator">=</span> <span class="token function">filterEmployees</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>employees<span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5、优化方式四-使用Stream-API"><a href="#5、优化方式四-使用Stream-API" class="headerlink" title="5、优化方式四-使用Stream-API"></a>5、<font color="green">优化方式四-使用Stream-API</font></h3><p><font color="red">使用<code>StreamAPI</code>完全不需要其他的代码，包括不需要<code>filterEmployees()</code>方法，代码很简洁:</font></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">4000</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Employee<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打印所有的名字</span><span class="token punctuation">}</span></code></pre><hr><h2 id="二、Lambda表达式基础语法"><a href="#二、Lambda表达式基础语法" class="headerlink" title="二、Lambda表达式基础语法"></a>二、Lambda表达式基础语法</h2><p><strong>关于箭头操作符:</strong> </p><ul><li><code>Java8</code>中引入了一个新的操作符，<code>&quot;-&gt;&quot;</code>，该操作符称为箭头操作符或者<code>Lambda</code>操作符，箭头操作符将<code>Lambda</code>表达式拆分成两部分；</li><li>左侧:  <code>Lambda</code>表达式的<font color="blue">参数列表</font>，对应的是<font color="red">接口中抽象方法的参数列表</font>；</li><li>右侧:  <code>Lambda</code>表达式中所需要执行的功能(<font color="blue"><code>Lambda</code>体</font>)，对应的是<font color="red">对抽象方法的实现；(函数式接口(只能有一个抽象方法))</font></li><li><code>Lambda</code>表达式的实质是　<font color="red">对接口的实现</font>；</li></ul><p><strong>语法格式:</strong></p><p>(一)、接口中的抽象方法 : 无参数，无返回值；</p><p>例如: <code>Runnable</code>接口中的<code>run</code>方法: </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*final */</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//jdk1.7之前必须定义为final的下面的匿名内部类中才能访问</span>    Runnable r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//本质还是不能对num操作(只是jdk自己为我们设置成了final的)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------使用Lambda输出-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Runnable r1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    r1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><font color="red">(二)、接口中的抽象方法 : 一个参数且无返回值；  (若只有一个参数，那么小括号可以省略不写)</font></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//  Consumer&lt;String>con = (x) -> System.out.println(x);</span>    Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span>con <span class="token operator">=</span> x <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    con<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"Lambda牛逼!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><font color="red">(三)、两个参数，有返回值，并且有多条语句 ：　<strong>要用大括号括起来，而且要写上<code>return</code></strong></font></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span>com <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"函数式接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//降序</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>     Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>com<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出: </p><pre class=" language-java"><code class="language-java">函数式接口函数式接口函数式接口函数式接口函数式接口函数式接口函数式接口函数式接口函数式接口<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><p><font color="red">(四)、两个参数，有返回值，但是只有一条语句:　<strong>大括号省略，<code>return</code>省略</strong></font></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span>com <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//升序</span>     Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>com<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>输出: </p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span></code></pre><p> <font color="red">(五)、 <code>Lambda</code>表达式的参数列表的数据类型 可以省略不写，因为JVM编译器通过上下文推断出数据类型，即”类型推断”， <code>(Integer x,Integer y ) -&gt; Integer.compare(x,y)</code>可以简写成<code>(x,y) -&gt; Integer.compare(x,y)</code>；</font></p><pre class=" language-java"><code class="language-java">上联<span class="token operator">:</span> 左右遇一括号省下联<span class="token operator">:</span> 左侧推断类型省横批<span class="token operator">:</span> 能省则省</code></pre><hr><h2 id="三、函数式接口"><a href="#三、函数式接口" class="headerlink" title="三、函数式接口"></a>三、函数式接口</h2><ul><li><p><font color="red">若接口中只有一个抽象方法的接口称为函数式接口；</font></p></li><li><p><font color="red">可以使用注解<code>@FunctionlInterface</code>来标识，可以检查是否是函数式接口；</font></p><p>例子: 对一个进行<code>+-*/</code>的运算：　</p></li></ul><p>函数式接口: </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span> <span class="token comment" spellcheck="true">//函数式接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyFunction</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Integer <span class="token function">getValue</span><span class="token punctuation">(</span>Integer num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>通用函数: </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Integer <span class="token function">operation</span><span class="token punctuation">(</span>Integer num<span class="token punctuation">,</span>MyFunction mf<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> mf<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>测试: </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     Integer res <span class="token operator">=</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><hr><h2 id="四、Lambda练习"><a href="#四、Lambda练习" class="headerlink" title="四、Lambda练习"></a>四、Lambda练习</h2><h3 id="1、练习一-Employee类中先按年龄比，年龄相同按照姓名比-都是升序"><a href="#1、练习一-Employee类中先按年龄比，年龄相同按照姓名比-都是升序" class="headerlink" title="1、练习一-Employee类中先按年龄比，年龄相同按照姓名比-都是升序"></a>1、练习一-<code>Employee</code>类中先按年龄比，年龄相同按照姓名比-都是升序</h3><p>先给出集合，模拟数据库表: </p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> employees <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"田七"</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">7777.77</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">5555.55</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">3333.33</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">4444.44</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"赵六"</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">6666.66</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>employees<span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> y<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>Employee emp<span class="token operator">:</span> employees<span class="token punctuation">)</span> <span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出: </p><pre class=" language-java"><code class="language-java">name<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">,</span> salary<span class="token operator">=</span><span class="token number">3333.33</span>name<span class="token operator">=</span><span class="token string">'李四'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">,</span> salary<span class="token operator">=</span><span class="token number">4444.44</span>name<span class="token operator">=</span><span class="token string">'王五'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">,</span> salary<span class="token operator">=</span><span class="token number">5555.55</span>name<span class="token operator">=</span><span class="token string">'赵六'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">26</span><span class="token punctuation">,</span> salary<span class="token operator">=</span><span class="token number">6666.66</span>name<span class="token operator">=</span><span class="token string">'田七'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">,</span> salary<span class="token operator">=</span><span class="token number">7777.77</span></code></pre><h3 id="2、练习二-声明一个带两个泛型的接口，并且对两个Long型数值计算"><a href="#2、练习二-声明一个带两个泛型的接口，并且对两个Long型数值计算" class="headerlink" title="2、练习二-声明一个带两个泛型的接口，并且对两个Long型数值计算"></a>2、练习二-声明一个带两个泛型的接口，并且对两个<code>Long</code>型数值计算</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyCalFunction</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span>R<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> R <span class="token function">getValue</span><span class="token punctuation">(</span>T t1<span class="token punctuation">,</span>T t2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>对应函数和测试: </p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">op</span><span class="token punctuation">(</span>200L<span class="token punctuation">,</span>200L<span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">op</span><span class="token punctuation">(</span>200L<span class="token punctuation">,</span>200L<span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">op</span><span class="token punctuation">(</span>Long l1<span class="token punctuation">,</span>Long l2<span class="token punctuation">,</span>MyCalFunction<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span>Long<span class="token operator">></span>mc<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//需求: 对于两个long型运算进行处理</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>更多的例子: (取自<code>&lt;&lt;</code>Java8<code>实战&gt;&gt;</code>)![在这里插入图片描述](images/lambd gita1.png)</p><blockquote><p>根据上述语法规则，以下哪个不是有效的Lambda表达式？<br>(1)  () -&gt; {}<br>(2)  () -&gt; “Raoul”<br>(3)  () -&gt; {return “Mario”;}<br>(4)  (Integer i) -&gt; return “Alan” + i;<br>(5)  (String s) -&gt; {“IronMan”;}<br>答案：只有4和 5是无效的Lambda。</p><p>(1) 这个Lambda没有参数，并返回void。 它类似于主体为空的方法：public void run() {}。<br>(2) 这个Lambda没有参数，并返回String作为表达式。<br>(3) 这个Lambda没有参数，并返回String（利用显式返回语句）。</p><p>(4) return是一个控制流语句。要使此Lambda有效，需要使花括号，如下所示：<code>(Integer i) -&gt; {return &quot;Alan&quot; + i;}</code>。</p><p>(5)“Iron Man”是一个表达式，不是一个语句。要使此Lambda有效，你可以去除花括号和分号，如下所示：<code>(String s) -&gt; &quot;Iron Man&quot;</code>。或者如果你喜欢，可以使用显式返回语句，如下所示：<code>(String s)-&gt;{return &quot;IronMan&quot;;}</code>。</p></blockquote><p>(注意类型可以省略(类型推导)。</p><p>下面是一些使用示例:<img src="images/lambda3.png" alt="在这里插入图片描述"></p><p>上图的<code>Apple</code>类: </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String color<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> weight<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Apple</span><span class="token punctuation">(</span>String color<span class="token punctuation">,</span> <span class="token keyword">int</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h2 id="五、Java8四大内置函数式接口"><a href="#五、Java8四大内置函数式接口" class="headerlink" title="五、Java8四大内置函数式接口"></a>五、Java8四大内置函数式接口</h2><p>我们发现，如果使用<code>Lambda</code>还要自己写一个接口的话太麻烦，所以<code>Java</code>自己提供了一些接口: </p><ul><li><code>Consumer&lt; T &gt;con</code> 消费性 接口:  <code>void accept(T t)</code>；</li><li><code>Supplier&lt; T &gt;sup</code>供给型接口 :  <code>T get()</code>；</li><li><code>Function&lt; T , R &gt;fun</code> 函数式接口 :   <code>R apply (T t)</code>；</li><li><code>Predicate&lt; T &gt;</code>： 断言形接口 : <code>boolean test(T t)</code>；</li></ul><h3 id="1、Consumer-lt-T-gt-con消费性接口-void-accept-T-t"><a href="#1、Consumer-lt-T-gt-con消费性接口-void-accept-T-t" class="headerlink" title="1、Consumer&lt; T &gt;con消费性接口-void accept(T t)"></a>1、<code>Consumer&lt; T &gt;con</code>消费性接口-<code>void accept(T t)</code></h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费了"</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">"元!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">double</span> num<span class="token punctuation">,</span>Consumer<span class="token operator">&lt;</span>Double<span class="token operator">></span>con<span class="token punctuation">)</span><span class="token punctuation">{</span>    con<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="2、Supplier-lt-T-gt-sup供给型接口-T-get"><a href="#2、Supplier-lt-T-gt-sup供给型接口-T-get" class="headerlink" title="2、Supplier&lt; T &gt;sup供给型接口-T get()"></a>2、<code>Supplier&lt; T &gt;sup</code>供给型接口-<code>T get()</code></h3><p>例子: 产生指定个数的整数，并放入集合中；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token function">getNumList</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//需求，产生指定个数的整数，并放入集合中</span><span class="token keyword">public</span> ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">getNumList</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> Supplier<span class="token operator">&lt;</span>Integer<span class="token operator">></span>sup<span class="token punctuation">)</span><span class="token punctuation">{</span>    ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span>list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Integer e <span class="token operator">=</span> sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3、Function-lt-T-R-gt-fun函数式接口-R-apply-T-t"><a href="#3、Function-lt-T-R-gt-fun函数式接口-R-apply-T-t" class="headerlink" title="3、Function&lt; T, R &gt;fun函数式接口-R apply (T t)"></a>3、<code>Function&lt; T, R &gt;fun</code>函数式接口-<code>R apply (T t)</code></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String newStr <span class="token operator">=</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    newStr <span class="token operator">=</span> <span class="token function">strHandler</span><span class="token punctuation">(</span><span class="token string">"   abc  "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> String <span class="token function">strHandler</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> Function<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span>fun<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> fun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4、Predicate-lt-T-gt-断言形接口-boolean-test-T-t"><a href="#4、Predicate-lt-T-gt-断言形接口-boolean-test-T-t" class="headerlink" title="4、Predicate&lt; T &gt;断言形接口-boolean test(T t)"></a>4、<code>Predicate&lt; T &gt;</code>断言形接口-<code>boolean test(T t)</code></h3><p>判断一些字符串数组判断长度<code>&gt;2</code>的字符串: </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"atguiu"</span><span class="token punctuation">,</span> <span class="token string">"lambda"</span><span class="token punctuation">,</span> <span class="token string">"ok"</span><span class="token punctuation">,</span> <span class="token string">"www"</span><span class="token punctuation">,</span> <span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> res <span class="token operator">=</span> <span class="token function">filterStr</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//需求</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">filterStr</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span>list<span class="token punctuation">,</span> Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span>pre<span class="token punctuation">)</span><span class="token punctuation">{</span>    ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span>res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>String str <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h2 id="六、方法引用和构造器引用"><a href="#六、方法引用和构造器引用" class="headerlink" title="六、方法引用和构造器引用"></a>六、方法引用和构造器引用</h2><h3 id="1、方法引用"><a href="#1、方法引用" class="headerlink" title="1、方法引用"></a>1、方法引用</h3><p>使用前提: <strong><code>Lambda</code>体中调用方法的参数列表和返回值类型，要和函数式接口中抽象方法的参数列表和返回值类型保持一致；</strong></p><h4 id="1-、语法格式-一-对象-实例方法名"><a href="#1-、语法格式-一-对象-实例方法名" class="headerlink" title="1)、语法格式(一) 对象::实例方法名"></a>1)、语法格式(一) 对象::实例方法名</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//普通写法</span>     PrintStream ps <span class="token operator">=</span> System<span class="token punctuation">.</span>out<span class="token punctuation">;</span>     Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span>con <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>     con<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"hello !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//简写</span>     Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span>con1 <span class="token operator">=</span> ps<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">;</span>     con1<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"hello ! "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//更简单的写法</span>     Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span>con2 <span class="token operator">=</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">;</span>     con2<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"hello ! "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>注意，这样写的前提: <code>Consumer</code>中的<code>accept()</code>方法和<code>println()</code>方法的参数列表和返回类型要完全一致:</strong><br><img src="images/lambda4.png" alt="这里写图片描述"><br><img src="images/lambda5.png" alt="这里写图片描述"></p><p>再看一个例子:<br>三种写法的效果是一样的: </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLambda</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// method 1</span>        Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> consumer <span class="token operator">=</span> s <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">useConsumer</span><span class="token punctuation">(</span>consumer<span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//method 2</span>        <span class="token function">useConsumer</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//method3   method reference (方法引用)</span>        <span class="token function">useConsumer</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//因为println和 accept 是同样的只有一个入参，没有返回值</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">useConsumer</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span>T<span class="token operator">></span> consumer<span class="token punctuation">,</span>T t<span class="token punctuation">)</span><span class="token punctuation">{</span>        consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再看一个例子: </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//都是输出 字符 'l'</span>    BiFunction<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token punctuation">,</span>Character<span class="token operator">></span> bf <span class="token operator">=</span> String<span class="token operator">:</span><span class="token operator">:</span>charAt<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里第一个必须传入　String</span>    Character c <span class="token operator">=</span> bf<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"hello,"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意这里使用的是Function 接口</span>    String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Character<span class="token operator">></span> f <span class="token operator">=</span> str<span class="token operator">:</span><span class="token operator">:</span>charAt<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里不需要String</span>    Character c2 <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再看一个例子: </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Employee emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"zx"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">5555</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Supplier<span class="token operator">&lt;</span>String<span class="token operator">></span>sup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> emp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//简写</span>    Supplier<span class="token operator">&lt;</span>String<span class="token operator">></span>sup2 <span class="token operator">=</span> emp<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sup2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="images/lambda6.png" alt="这里写图片描述"></p><p><img src="images/lambda7.png" alt="这里写图片描述"></p><h4 id="2-、语法格式-二-类名-静态方法"><a href="#2-、语法格式-二-类名-静态方法" class="headerlink" title="2)、语法格式(二)  类名::静态方法"></a>2)、语法格式(二)  类名::静态方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span>com <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>     Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span>com2 <span class="token operator">=</span> Integer<span class="token operator">:</span><span class="token operator">:</span>compare<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>Integer</code>类中的</p><p><img src="images/lambda8.png" alt="这里写图片描述"></p><p><code>Comparator</code>接口中的方法: </p><p><img src="images/lambda9.png" alt="这里写图片描述"></p><h4 id="3-、语法格式-三-类-实例方法名"><a href="#3-、语法格式-三-类-实例方法名" class="headerlink" title="3)、语法格式(三) 类::实例方法名"></a>3)、语法格式(三) 类::实例方法名</h4><p>使用注意: <strong>若Lambda参数列表中的第一个参数是实例方法的第一个调用者，而第二个参数是实例方法的参数时，可以使用<code>ClassName :: method</code>。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    BiPredicate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span>bp <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    BiPredicate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span>bp2 <span class="token operator">=</span> String<span class="token operator">:</span><span class="token operator">:</span>equals<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="images/lambda10.png" alt="这里写图片描述"></p><p><img src="images/lambda11.png" alt="这里写图片描述"></p><h3 id="2-、构造器引用"><a href="#2-、构造器引用" class="headerlink" title="2)、构造器引用"></a>2)、构造器引用</h3><p><strong>需要调用构造器的参数列表，要与函数式接口中的抽象方法的参数列表保持一致；</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Supplier<span class="token operator">&lt;</span>Employee<span class="token operator">></span>sup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Supplier<span class="token operator">&lt;</span>Employee<span class="token operator">></span>sup2 <span class="token operator">=</span> Employee<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用的是默认的</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sup2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出: </p><pre class=" language-java"><code class="language-java">name<span class="token operator">=</span><span class="token string">'null'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> salary<span class="token operator">=</span><span class="token number">0.0</span></code></pre><p><img src="images/images12.png" alt="这里写图片描述"></p><p><img src="images/lambda12.png" alt="这里写图片描述"></p><p>再看构造器一个参数的: </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Function<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Employee<span class="token operator">></span>fun <span class="token operator">=</span> Employee<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"zx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre class=" language-java"><code class="language-java">name<span class="token operator">=</span><span class="token string">'zx'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> salary<span class="token operator">=</span><span class="token number">0.0</span></code></pre><p><img src="images/lambda13.png" alt="这里写图片描述"></p><p><img src="images/lambda14.png" alt="这里写图片描述"></p><p>如果想要匹配多个的，(两个的可以使用<code>BiFunction</code>)，下面看一个三个的:<br>例如想匹配这个: </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComplexApple</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> weight<span class="token punctuation">;</span>    <span class="token keyword">private</span> String color<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ComplexApple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//匹配这个构造方法</span>    <span class="token keyword">public</span> <span class="token function">ComplexApple</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> weight<span class="token punctuation">,</span> String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>自己建一个接口:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ThreeFunction</span><span class="token operator">&lt;</span>A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">,</span>R<span class="token operator">></span> <span class="token punctuation">{</span>    R <span class="token function">apply</span><span class="token punctuation">(</span>A a<span class="token punctuation">,</span>B b<span class="token punctuation">,</span>C c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>测试: </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreeFunction<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token punctuation">,</span>String<span class="token punctuation">,</span>ComplexApple<span class="token operator">></span> tf <span class="token operator">=</span> ComplexApple<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>        ComplexApple apple <span class="token operator">=</span> tf<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"蓝色"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"好苹果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-单例模式</title>
      <link href="/2019/06/11/14-dan-li-mo-shi/"/>
      <url>/2019/06/11/14-dan-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><p>单例模式属于创建型设计模式。</p><p>确保一个类只有一个实例，并提供该实例的全局访问点。</p><p>实现: <strong>使用一个私有构造函数、一个私有静态变量以及一个公有静态函数来实现</strong>。</p><h2 id="二、结构"><a href="#二、结构" class="headerlink" title="二、结构"></a>二、结构</h2><p>类图:</p><p><img src="http://psxfdx6gr.bkt.clouddn.com/14_singleton.png" alt="14_singleton.png"></p><p><strong>私有构造函数保证了不能通过构造函数来创建对象实例，只能通过公有静态函数返回唯一的私有静态变量</strong>。</p><h2 id="三、几类经典单例模式实现"><a href="#三、几类经典单例模式实现" class="headerlink" title="三、几类经典单例模式实现"></a>三、几类经典单例模式实现</h2><h3 id="1、懒汉式-线程不安全"><a href="#1、懒汉式-线程不安全" class="headerlink" title="1、懒汉式-线程不安全"></a>1、懒汉式-线程不安全</h3><p>下面的实现中，私有静态变量 <code>uniqueInstance</code> 被延迟实例化，这样做的好处是，如果没有用到该类，那么就不会实例化 <code>uniqueInstance</code>，从而节约资源。</p><p>这个实现在多线程环境下是不安全的，如果多个线程能够同时进入 <code>if (uniqueInstance == null)</code> ，并且此时 <code>uniqueInstance == null</code>，那么会有多个线程执行 <code>uniqueInstance = new Singleton();</code> 语句，这将导致实例化多次 <code>uniqueInstance</code>。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 懒汉式: 线程不安全</span><span class="token comment" spellcheck="true">// 有延迟加载: 不是在类加载的时候就创建了，而是在调用newStance()的时候才会创建</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton uniqueInstance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> null<span class="token punctuation">)</span>            uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2、懒汉式-线程安全-性能不好"><a href="#2、懒汉式-线程安全-性能不好" class="headerlink" title="2、懒汉式-线程安全-性能不好"></a>2、懒汉式-线程安全-性能不好</h3><p>为了解决上面的问题，我们可以直接在<code>newInstance()</code>方法上面直接加上一把<code>synchronized</code>同步锁。那么在一个时间点只能有一个线程能够进入该方法，从而避免了实例化多次 <code>uniqueInstance</code>。</p><p>但是当一个线程进入该方法之后，其它试图进入该方法的线程都必须等待，即使 <code>uniqueInstance</code> 已经被实例化了。这会让线程阻塞时间过长，因此该方法有性能问题，<strong>不推荐使用</strong>。 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//在上面的基础上加了synchronized</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> null<span class="token punctuation">)</span>        uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3、饿汉式-线程安全-无延迟加载"><a href="#3、饿汉式-线程安全-无延迟加载" class="headerlink" title="3、饿汉式-线程安全-无延迟加载"></a>3、饿汉式-线程安全-无延迟加载</h3><p>饿汉式就是 : 采取直接实例化 <code>uniqueInstance</code> 的方式，这样就不会产生线程不安全问题。</p><p>这种方式比较常用，但容易产生垃圾对象(丢失了延迟实例化(<code>lazy loading</code>)带来的节约资源的好处)。</p><p>它基于 <strong>classloader机制</strong>避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， <strong>但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazyloading 的效果</strong>。 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 急切的创建了uniqueInstance, 所以叫饿汉式</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 瞎写一个静态方法。这里想说的是，如果我们只是要调用 Singleton.getStr(...)，</span>    <span class="token comment" spellcheck="true">// 本来是不想要生成 Singleton 实例的，不过没办法，已经生成了</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getStr</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"hello"</span> <span class="token operator">+</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4、双重校验锁-线程安全"><a href="#4、双重校验锁-线程安全" class="headerlink" title="4、双重校验锁-线程安全"></a>4、双重校验锁-线程安全</h3><p><code>uniqueInstance</code> 只需要被实例化一次，之后就可以直接使用了。<strong>加锁操作只需要对实例化那部分的代码进行</strong>，只有当<code>uniqueInstance</code> 没有被实例化时，才需要进行加锁。</p><p>双重校验锁<strong>先判断 <code>uniqueInstance</code> 是否已经被实例化，如果没有被实例化，那么才对实例化语句进行加锁</strong>。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 双重加锁</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 和饿汉模式相比，这边不需要先实例化出来</span>    <span class="token comment" spellcheck="true">// 注意这里的 volatile，使用 volatile 可以禁止 JVM 的指令重排，保证在多线程环境下也能正常运行</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton uniqueInstance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 这一次判断也是必须的，不然会有并发问题</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意，内层的第二次<code>if (uniqueInstance == null) {</code>也是必须的，如果不加:<br>也就是只使用了一个 if 语句。在 <code>uniqueInstance == null</code> 的情况下，如果两个线程都执行了 if 语句，那么两个线程都会进入 if 语句块内。虽然在 if 语句块内有加锁操作，但是两个线程都会执行 <code>uniqueInstance = new Singleton();</code>这条语句，只是先后的问题，那么就会进行两次实例化。因此必须使用双重校验锁，也就是需要使用两个 if 语句。</p></blockquote><p><code>volatile</code> 关键字修饰也是很有必要的， <code>uniqueInstance = new Singleton();</code> 这段代码其实是分为三步执行：</p><ul><li>1)、为 <code>uniqueInstance</code> 分配内存空间；</li><li>2)、初始化 <code>uniqueInstance</code>；</li><li>3)、将 <code>uniqueInstance</code> 指向分配的内存地址；</li></ul><p>但是由于 JVM 具有<strong>指令重排</strong>的特性，执行顺序有可能变成 <code>1&gt;3&gt;2</code>。指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。例如，线程 <code>T1</code> 执行了 1 和 3，此时 <code>T2</code>调用 <code>newInstance()</code> 后发现 <code>uniqueInstance</code> 不为空，因此返回 <code>uniqueInstance</code>，但此时 <code>uniqueInstance</code> 还未被初始化。</p><p><strong>使用 volatile 可以禁止 JVM 的指令重排，保证在多线程环境下也能正常运行</strong>。</p><h3 id="5、静态内部类实现"><a href="#5、静态内部类实现" class="headerlink" title="5、静态内部类实现"></a>5、静态内部类实现</h3><p>当 <code>Singleton</code> 类加载时，<strong>静态内部类 Holder 没有被加载进内存</strong>。只有当调用 <code>newInstance()</code> 方法从而触发 <code>Holder.uniqueInstance</code> 时 <code>Holder</code>才会被加载，此时初始化<code>uniqueInstance</code> 实例，并且 JVM 能确保 <code>uniqueInstance</code> 只被实例化一次。</p><p>这种方式不仅具有延迟初始化的好处，而且由 JVM 提供了对线程安全的支持。</p><blockquote><p>这种方式是 Singleton 类被装载了，<code>uniqueInstance</code> 不一定被初始化。因为 <code>Holder</code>s 类没有被主动使用，只有通过显式调用 <code>newInstance()</code>方法时，才会显式装载 Holder 类，从而实例化<code>uniqueInstance</code>。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 主要是使用了 嵌套类可以访问外部类的静态属性和静态方法 的特性</span>    <span class="token comment" spellcheck="true">// 很多人都会把这个嵌套类说成是静态内部类，严格地说，内部类和嵌套类是不一样的，它们能访问的外部类权限也是不一样的。</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Holder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Holder<span class="token punctuation">.</span>uniqueInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6、枚举实现"><a href="#6、枚举实现" class="headerlink" title="6、枚举实现"></a>6、枚举实现</h3><p>这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。</p><p>该实现在多次序列化再进行反序列化之后，不会得到多个实例。而其它实现需要使用 <code>transient</code> 修饰所有字段，并且实现序列化和反序列化的方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Singleton <span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 单例测试</span>        Singleton s1 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"firstName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1.getName(): "</span> <span class="token operator">+</span> s1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Singleton s2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"secondName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注意我这里输出s1 ，但是已经变成了 secondName</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1.getName(): "</span> <span class="token operator">+</span> s1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s2.getName(): "</span> <span class="token operator">+</span> s2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 反射获取实例测试</span>        Singleton<span class="token punctuation">[</span><span class="token punctuation">]</span> enumConstants <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Singleton enumConstant <span class="token operator">:</span> enumConstants<span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>enumConstant<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出:</p><pre class=" language-java"><code class="language-java">s1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> firstNames1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> secondNames2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> secondName<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>secondName</code></pre><blockquote><p>该实现可以防止反射攻击。在其它实现中，通过 <code>setAccessible()</code>(反射中的强制访问私有属性方法) 方法可以将私有构造函数的访问级别设置为 public，然后调用构造函数从而实例化对象，如果要防止这种攻击，需要在构造函数中添加防止多次实例化的代码。该实现是由 JVM 保证只会实例化一次，因此不会出现上述的反射攻击。</p></blockquote><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>一般情况下，<strong>不建议使用懒汉方式</strong>，建议使用饿汉方式。</p><p>只有在要明确实现 <code>lazy loading</code> 效果时，才会使用<strong>静态内部类方式</strong>。</p><p>如果涉及到<strong>反序列化创建对象</strong>时，可以尝试使用枚举方式。</p><p>如果有其他特殊的需求，可以考虑使用双检锁方式。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-matter 选项详解</title>
      <link href="/2019/06/05/front-matter-jie-shao/"/>
      <url>/2019/06/05/front-matter-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> XXX<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
